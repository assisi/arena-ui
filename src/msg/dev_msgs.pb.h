// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dev_msgs.proto

#ifndef PROTOBUF_dev_5fmsgs_2eproto__INCLUDED
#define PROTOBUF_dev_5fmsgs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_msgs.pb.h"
// @@protoc_insertion_point(includes)

namespace AssisiMsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dev_5fmsgs_2eproto();
void protobuf_AssignDesc_dev_5fmsgs_2eproto();
void protobuf_ShutdownFile_dev_5fmsgs_2eproto();

class RangeArray;
class Temperature;
class TemperatureArray;
class TemperatureWithGradient;
class VibrationSetpoint;
class VibrationReading;
class VibrationReadingArray;
class DiffDrive;
class ObjectArray;
class Airflow;
class AirflowReading;

enum RangeArray_SensorType {
  RangeArray_SensorType_IR = 0
};
bool RangeArray_SensorType_IsValid(int value);
const RangeArray_SensorType RangeArray_SensorType_SensorType_MIN = RangeArray_SensorType_IR;
const RangeArray_SensorType RangeArray_SensorType_SensorType_MAX = RangeArray_SensorType_IR;
const int RangeArray_SensorType_SensorType_ARRAYSIZE = RangeArray_SensorType_SensorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RangeArray_SensorType_descriptor();
inline const ::std::string& RangeArray_SensorType_Name(RangeArray_SensorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RangeArray_SensorType_descriptor(), value);
}
inline bool RangeArray_SensorType_Parse(
    const ::std::string& name, RangeArray_SensorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RangeArray_SensorType>(
    RangeArray_SensorType_descriptor(), name, value);
}
// ===================================================================

class RangeArray : public ::google::protobuf::Message {
 public:
  RangeArray();
  virtual ~RangeArray();

  RangeArray(const RangeArray& from);

  inline RangeArray& operator=(const RangeArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeArray& default_instance();

  void Swap(RangeArray* other);

  // implements Message ----------------------------------------------

  RangeArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeArray& from);
  void MergeFrom(const RangeArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RangeArray_SensorType SensorType;
  static const SensorType IR = RangeArray_SensorType_IR;
  static inline bool SensorType_IsValid(int value) {
    return RangeArray_SensorType_IsValid(value);
  }
  static const SensorType SensorType_MIN =
    RangeArray_SensorType_SensorType_MIN;
  static const SensorType SensorType_MAX =
    RangeArray_SensorType_SensorType_MAX;
  static const int SensorType_ARRAYSIZE =
    RangeArray_SensorType_SensorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SensorType_descriptor() {
    return RangeArray_SensorType_descriptor();
  }
  static inline const ::std::string& SensorType_Name(SensorType value) {
    return RangeArray_SensorType_Name(value);
  }
  static inline bool SensorType_Parse(const ::std::string& name,
      SensorType* value) {
    return RangeArray_SensorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .AssisiMsg.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::AssisiMsg::Header& header() const;
  inline ::AssisiMsg::Header* mutable_header();
  inline ::AssisiMsg::Header* release_header();
  inline void set_allocated_header(::AssisiMsg::Header* header);

  // optional .AssisiMsg.RangeArray.SensorType type = 2 [default = IR];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::AssisiMsg::RangeArray_SensorType type() const;
  inline void set_type(::AssisiMsg::RangeArray_SensorType value);

  // optional float field_of_view = 3 [default = 0.5236];
  inline bool has_field_of_view() const;
  inline void clear_field_of_view();
  static const int kFieldOfViewFieldNumber = 3;
  inline float field_of_view() const;
  inline void set_field_of_view(float value);

  // optional float min_range = 4 [default = 0];
  inline bool has_min_range() const;
  inline void clear_min_range();
  static const int kMinRangeFieldNumber = 4;
  inline float min_range() const;
  inline void set_min_range(float value);

  // optional float max_range = 5 [default = inf];
  inline bool has_max_range() const;
  inline void clear_max_range();
  static const int kMaxRangeFieldNumber = 5;
  inline float max_range() const;
  inline void set_max_range(float value);

  // repeated float range = 6;
  inline int range_size() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 6;
  inline float range(int index) const;
  inline void set_range(int index, float value);
  inline void add_range(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      range() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_range();

  // repeated float raw_value = 7;
  inline int raw_value_size() const;
  inline void clear_raw_value();
  static const int kRawValueFieldNumber = 7;
  inline float raw_value(int index) const;
  inline void set_raw_value(int index, float value);
  inline void add_raw_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      raw_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_raw_value();

  // @@protoc_insertion_point(class_scope:AssisiMsg.RangeArray)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_field_of_view();
  inline void clear_has_field_of_view();
  inline void set_has_min_range();
  inline void clear_has_min_range();
  inline void set_has_max_range();
  inline void clear_has_max_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AssisiMsg::Header* header_;
  int type_;
  float field_of_view_;
  float min_range_;
  float max_range_;
  ::google::protobuf::RepeatedField< float > range_;
  ::google::protobuf::RepeatedField< float > raw_value_;
  friend void  protobuf_AddDesc_dev_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_dev_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_dev_5fmsgs_2eproto();

  void InitAsDefaultInstance();
  static RangeArray* default_instance_;
};
// -------------------------------------------------------------------

class Temperature : public ::google::protobuf::Message {
 public:
  Temperature();
  virtual ~Temperature();

  Temperature(const Temperature& from);

  inline Temperature& operator=(const Temperature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Temperature& default_instance();

  void Swap(Temperature* other);

  // implements Message ----------------------------------------------

  Temperature* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Temperature& from);
  void MergeFrom(const Temperature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AssisiMsg.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::AssisiMsg::Header& header() const;
  inline ::AssisiMsg::Header* mutable_header();
  inline ::AssisiMsg::Header* release_header();
  inline void set_allocated_header(::AssisiMsg::Header* header);

  // required float temp = 2;
  inline bool has_temp() const;
  inline void clear_temp();
  static const int kTempFieldNumber = 2;
  inline float temp() const;
  inline void set_temp(float value);

  // @@protoc_insertion_point(class_scope:AssisiMsg.Temperature)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_temp();
  inline void clear_has_temp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AssisiMsg::Header* header_;
  float temp_;
  friend void  protobuf_AddDesc_dev_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_dev_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_dev_5fmsgs_2eproto();

  void InitAsDefaultInstance();
  static Temperature* default_instance_;
};
// -------------------------------------------------------------------

class TemperatureArray : public ::google::protobuf::Message {
 public:
  TemperatureArray();
  virtual ~TemperatureArray();

  TemperatureArray(const TemperatureArray& from);

  inline TemperatureArray& operator=(const TemperatureArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TemperatureArray& default_instance();

  void Swap(TemperatureArray* other);

  // implements Message ----------------------------------------------

  TemperatureArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TemperatureArray& from);
  void MergeFrom(const TemperatureArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AssisiMsg.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::AssisiMsg::Header& header() const;
  inline ::AssisiMsg::Header* mutable_header();
  inline ::AssisiMsg::Header* release_header();
  inline void set_allocated_header(::AssisiMsg::Header* header);

  // repeated float temp = 2;
  inline int temp_size() const;
  inline void clear_temp();
  static const int kTempFieldNumber = 2;
  inline float temp(int index) const;
  inline void set_temp(int index, float value);
  inline void add_temp(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      temp() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_temp();

  // @@protoc_insertion_point(class_scope:AssisiMsg.TemperatureArray)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AssisiMsg::Header* header_;
  ::google::protobuf::RepeatedField< float > temp_;
  friend void  protobuf_AddDesc_dev_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_dev_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_dev_5fmsgs_2eproto();

  void InitAsDefaultInstance();
  static TemperatureArray* default_instance_;
};
// -------------------------------------------------------------------

class TemperatureWithGradient : public ::google::protobuf::Message {
 public:
  TemperatureWithGradient();
  virtual ~TemperatureWithGradient();

  TemperatureWithGradient(const TemperatureWithGradient& from);

  inline TemperatureWithGradient& operator=(const TemperatureWithGradient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TemperatureWithGradient& default_instance();

  void Swap(TemperatureWithGradient* other);

  // implements Message ----------------------------------------------

  TemperatureWithGradient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TemperatureWithGradient& from);
  void MergeFrom(const TemperatureWithGradient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AssisiMsg.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::AssisiMsg::Header& header() const;
  inline ::AssisiMsg::Header* mutable_header();
  inline ::AssisiMsg::Header* release_header();
  inline void set_allocated_header(::AssisiMsg::Header* header);

  // required float temp = 2;
  inline bool has_temp() const;
  inline void clear_temp();
  static const int kTempFieldNumber = 2;
  inline float temp() const;
  inline void set_temp(float value);

  // required float dtx = 3;
  inline bool has_dtx() const;
  inline void clear_dtx();
  static const int kDtxFieldNumber = 3;
  inline float dtx() const;
  inline void set_dtx(float value);

  // required float dty = 4;
  inline bool has_dty() const;
  inline void clear_dty();
  static const int kDtyFieldNumber = 4;
  inline float dty() const;
  inline void set_dty(float value);

  // @@protoc_insertion_point(class_scope:AssisiMsg.TemperatureWithGradient)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_temp();
  inline void clear_has_temp();
  inline void set_has_dtx();
  inline void clear_has_dtx();
  inline void set_has_dty();
  inline void clear_has_dty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AssisiMsg::Header* header_;
  float temp_;
  float dtx_;
  float dty_;
  friend void  protobuf_AddDesc_dev_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_dev_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_dev_5fmsgs_2eproto();

  void InitAsDefaultInstance();
  static TemperatureWithGradient* default_instance_;
};
// -------------------------------------------------------------------

class VibrationSetpoint : public ::google::protobuf::Message {
 public:
  VibrationSetpoint();
  virtual ~VibrationSetpoint();

  VibrationSetpoint(const VibrationSetpoint& from);

  inline VibrationSetpoint& operator=(const VibrationSetpoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VibrationSetpoint& default_instance();

  void Swap(VibrationSetpoint* other);

  // implements Message ----------------------------------------------

  VibrationSetpoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VibrationSetpoint& from);
  void MergeFrom(const VibrationSetpoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AssisiMsg.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::AssisiMsg::Header& header() const;
  inline ::AssisiMsg::Header* mutable_header();
  inline ::AssisiMsg::Header* release_header();
  inline void set_allocated_header(::AssisiMsg::Header* header);

  // required double freq = 2;
  inline bool has_freq() const;
  inline void clear_freq();
  static const int kFreqFieldNumber = 2;
  inline double freq() const;
  inline void set_freq(double value);

  // optional double amplitude = 3;
  inline bool has_amplitude() const;
  inline void clear_amplitude();
  static const int kAmplitudeFieldNumber = 3;
  inline double amplitude() const;
  inline void set_amplitude(double value);

  // @@protoc_insertion_point(class_scope:AssisiMsg.VibrationSetpoint)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_freq();
  inline void clear_has_freq();
  inline void set_has_amplitude();
  inline void clear_has_amplitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AssisiMsg::Header* header_;
  double freq_;
  double amplitude_;
  friend void  protobuf_AddDesc_dev_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_dev_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_dev_5fmsgs_2eproto();

  void InitAsDefaultInstance();
  static VibrationSetpoint* default_instance_;
};
// -------------------------------------------------------------------

class VibrationReading : public ::google::protobuf::Message {
 public:
  VibrationReading();
  virtual ~VibrationReading();

  VibrationReading(const VibrationReading& from);

  inline VibrationReading& operator=(const VibrationReading& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VibrationReading& default_instance();

  void Swap(VibrationReading* other);

  // implements Message ----------------------------------------------

  VibrationReading* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VibrationReading& from);
  void MergeFrom(const VibrationReading& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AssisiMsg.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::AssisiMsg::Header& header() const;
  inline ::AssisiMsg::Header* mutable_header();
  inline ::AssisiMsg::Header* release_header();
  inline void set_allocated_header(::AssisiMsg::Header* header);

  // repeated float freq = 2;
  inline int freq_size() const;
  inline void clear_freq();
  static const int kFreqFieldNumber = 2;
  inline float freq(int index) const;
  inline void set_freq(int index, float value);
  inline void add_freq(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      freq() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_freq();

  // repeated float amplitude = 3;
  inline int amplitude_size() const;
  inline void clear_amplitude();
  static const int kAmplitudeFieldNumber = 3;
  inline float amplitude(int index) const;
  inline void set_amplitude(int index, float value);
  inline void add_amplitude(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      amplitude() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_amplitude();

  // repeated float amplitude_stdev = 4;
  inline int amplitude_stdev_size() const;
  inline void clear_amplitude_stdev();
  static const int kAmplitudeStdevFieldNumber = 4;
  inline float amplitude_stdev(int index) const;
  inline void set_amplitude_stdev(int index, float value);
  inline void add_amplitude_stdev(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      amplitude_stdev() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_amplitude_stdev();

  // @@protoc_insertion_point(class_scope:AssisiMsg.VibrationReading)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AssisiMsg::Header* header_;
  ::google::protobuf::RepeatedField< float > freq_;
  ::google::protobuf::RepeatedField< float > amplitude_;
  ::google::protobuf::RepeatedField< float > amplitude_stdev_;
  friend void  protobuf_AddDesc_dev_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_dev_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_dev_5fmsgs_2eproto();

  void InitAsDefaultInstance();
  static VibrationReading* default_instance_;
};
// -------------------------------------------------------------------

class VibrationReadingArray : public ::google::protobuf::Message {
 public:
  VibrationReadingArray();
  virtual ~VibrationReadingArray();

  VibrationReadingArray(const VibrationReadingArray& from);

  inline VibrationReadingArray& operator=(const VibrationReadingArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VibrationReadingArray& default_instance();

  void Swap(VibrationReadingArray* other);

  // implements Message ----------------------------------------------

  VibrationReadingArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VibrationReadingArray& from);
  void MergeFrom(const VibrationReadingArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AssisiMsg.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::AssisiMsg::Header& header() const;
  inline ::AssisiMsg::Header* mutable_header();
  inline ::AssisiMsg::Header* release_header();
  inline void set_allocated_header(::AssisiMsg::Header* header);

  // repeated .AssisiMsg.VibrationReading reading = 2;
  inline int reading_size() const;
  inline void clear_reading();
  static const int kReadingFieldNumber = 2;
  inline const ::AssisiMsg::VibrationReading& reading(int index) const;
  inline ::AssisiMsg::VibrationReading* mutable_reading(int index);
  inline ::AssisiMsg::VibrationReading* add_reading();
  inline const ::google::protobuf::RepeatedPtrField< ::AssisiMsg::VibrationReading >&
      reading() const;
  inline ::google::protobuf::RepeatedPtrField< ::AssisiMsg::VibrationReading >*
      mutable_reading();

  // @@protoc_insertion_point(class_scope:AssisiMsg.VibrationReadingArray)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AssisiMsg::Header* header_;
  ::google::protobuf::RepeatedPtrField< ::AssisiMsg::VibrationReading > reading_;
  friend void  protobuf_AddDesc_dev_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_dev_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_dev_5fmsgs_2eproto();

  void InitAsDefaultInstance();
  static VibrationReadingArray* default_instance_;
};
// -------------------------------------------------------------------

class DiffDrive : public ::google::protobuf::Message {
 public:
  DiffDrive();
  virtual ~DiffDrive();

  DiffDrive(const DiffDrive& from);

  inline DiffDrive& operator=(const DiffDrive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiffDrive& default_instance();

  void Swap(DiffDrive* other);

  // implements Message ----------------------------------------------

  DiffDrive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiffDrive& from);
  void MergeFrom(const DiffDrive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AssisiMsg.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::AssisiMsg::Header& header() const;
  inline ::AssisiMsg::Header* mutable_header();
  inline ::AssisiMsg::Header* release_header();
  inline void set_allocated_header(::AssisiMsg::Header* header);

  // required double vel_left = 2;
  inline bool has_vel_left() const;
  inline void clear_vel_left();
  static const int kVelLeftFieldNumber = 2;
  inline double vel_left() const;
  inline void set_vel_left(double value);

  // required double vel_right = 3;
  inline bool has_vel_right() const;
  inline void clear_vel_right();
  static const int kVelRightFieldNumber = 3;
  inline double vel_right() const;
  inline void set_vel_right(double value);

  // @@protoc_insertion_point(class_scope:AssisiMsg.DiffDrive)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_vel_left();
  inline void clear_has_vel_left();
  inline void set_has_vel_right();
  inline void clear_has_vel_right();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AssisiMsg::Header* header_;
  double vel_left_;
  double vel_right_;
  friend void  protobuf_AddDesc_dev_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_dev_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_dev_5fmsgs_2eproto();

  void InitAsDefaultInstance();
  static DiffDrive* default_instance_;
};
// -------------------------------------------------------------------

class ObjectArray : public ::google::protobuf::Message {
 public:
  ObjectArray();
  virtual ~ObjectArray();

  ObjectArray(const ObjectArray& from);

  inline ObjectArray& operator=(const ObjectArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectArray& default_instance();

  void Swap(ObjectArray* other);

  // implements Message ----------------------------------------------

  ObjectArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectArray& from);
  void MergeFrom(const ObjectArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AssisiMsg.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::AssisiMsg::Header& header() const;
  inline ::AssisiMsg::Header* mutable_header();
  inline ::AssisiMsg::Header* release_header();
  inline void set_allocated_header(::AssisiMsg::Header* header);

  // optional float field_of_view = 3 [default = 0.5236];
  inline bool has_field_of_view() const;
  inline void clear_field_of_view();
  static const int kFieldOfViewFieldNumber = 3;
  inline float field_of_view() const;
  inline void set_field_of_view(float value);

  // optional float min_range = 4 [default = 0];
  inline bool has_min_range() const;
  inline void clear_min_range();
  static const int kMinRangeFieldNumber = 4;
  inline float min_range() const;
  inline void set_min_range(float value);

  // optional float max_range = 5 [default = inf];
  inline bool has_max_range() const;
  inline void clear_max_range();
  static const int kMaxRangeFieldNumber = 5;
  inline float max_range() const;
  inline void set_max_range(float value);

  // repeated float range = 6;
  inline int range_size() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 6;
  inline float range(int index) const;
  inline void set_range(int index, float value);
  inline void add_range(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      range() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_range();

  // repeated string type = 7;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline const ::std::string& type(int index) const;
  inline ::std::string* mutable_type(int index);
  inline void set_type(int index, const ::std::string& value);
  inline void set_type(int index, const char* value);
  inline void set_type(int index, const char* value, size_t size);
  inline ::std::string* add_type();
  inline void add_type(const ::std::string& value);
  inline void add_type(const char* value);
  inline void add_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type();

  // @@protoc_insertion_point(class_scope:AssisiMsg.ObjectArray)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_field_of_view();
  inline void clear_has_field_of_view();
  inline void set_has_min_range();
  inline void clear_has_min_range();
  inline void set_has_max_range();
  inline void clear_has_max_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AssisiMsg::Header* header_;
  float field_of_view_;
  float min_range_;
  ::google::protobuf::RepeatedField< float > range_;
  ::google::protobuf::RepeatedPtrField< ::std::string> type_;
  float max_range_;
  friend void  protobuf_AddDesc_dev_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_dev_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_dev_5fmsgs_2eproto();

  void InitAsDefaultInstance();
  static ObjectArray* default_instance_;
};
// -------------------------------------------------------------------

class Airflow : public ::google::protobuf::Message {
 public:
  Airflow();
  virtual ~Airflow();

  Airflow(const Airflow& from);

  inline Airflow& operator=(const Airflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Airflow& default_instance();

  void Swap(Airflow* other);

  // implements Message ----------------------------------------------

  Airflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Airflow& from);
  void MergeFrom(const Airflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AssisiMsg.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::AssisiMsg::Header& header() const;
  inline ::AssisiMsg::Header* mutable_header();
  inline ::AssisiMsg::Header* release_header();
  inline void set_allocated_header(::AssisiMsg::Header* header);

  // required float intensity = 2;
  inline bool has_intensity() const;
  inline void clear_intensity();
  static const int kIntensityFieldNumber = 2;
  inline float intensity() const;
  inline void set_intensity(float value);

  // @@protoc_insertion_point(class_scope:AssisiMsg.Airflow)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_intensity();
  inline void clear_has_intensity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AssisiMsg::Header* header_;
  float intensity_;
  friend void  protobuf_AddDesc_dev_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_dev_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_dev_5fmsgs_2eproto();

  void InitAsDefaultInstance();
  static Airflow* default_instance_;
};
// -------------------------------------------------------------------

class AirflowReading : public ::google::protobuf::Message {
 public:
  AirflowReading();
  virtual ~AirflowReading();

  AirflowReading(const AirflowReading& from);

  inline AirflowReading& operator=(const AirflowReading& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AirflowReading& default_instance();

  void Swap(AirflowReading* other);

  // implements Message ----------------------------------------------

  AirflowReading* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AirflowReading& from);
  void MergeFrom(const AirflowReading& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AssisiMsg.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::AssisiMsg::Header& header() const;
  inline ::AssisiMsg::Header* mutable_header();
  inline ::AssisiMsg::Header* release_header();
  inline void set_allocated_header(::AssisiMsg::Header* header);

  // required float intensity = 2;
  inline bool has_intensity() const;
  inline void clear_intensity();
  static const int kIntensityFieldNumber = 2;
  inline float intensity() const;
  inline void set_intensity(float value);

  // required float direction = 3;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 3;
  inline float direction() const;
  inline void set_direction(float value);

  // @@protoc_insertion_point(class_scope:AssisiMsg.AirflowReading)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_intensity();
  inline void clear_has_intensity();
  inline void set_has_direction();
  inline void clear_has_direction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AssisiMsg::Header* header_;
  float intensity_;
  float direction_;
  friend void  protobuf_AddDesc_dev_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_dev_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_dev_5fmsgs_2eproto();

  void InitAsDefaultInstance();
  static AirflowReading* default_instance_;
};
// ===================================================================


// ===================================================================

// RangeArray

// optional .AssisiMsg.Header header = 1;
inline bool RangeArray::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeArray::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeArray::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeArray::clear_header() {
  if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  clear_has_header();
}
inline const ::AssisiMsg::Header& RangeArray::header() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.RangeArray.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::AssisiMsg::Header* RangeArray::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::AssisiMsg::Header;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.RangeArray.header)
  return header_;
}
inline ::AssisiMsg::Header* RangeArray::release_header() {
  clear_has_header();
  ::AssisiMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void RangeArray::set_allocated_header(::AssisiMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.RangeArray.header)
}

// optional .AssisiMsg.RangeArray.SensorType type = 2 [default = IR];
inline bool RangeArray::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeArray::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RangeArray::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RangeArray::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::AssisiMsg::RangeArray_SensorType RangeArray::type() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.RangeArray.type)
  return static_cast< ::AssisiMsg::RangeArray_SensorType >(type_);
}
inline void RangeArray::set_type(::AssisiMsg::RangeArray_SensorType value) {
  assert(::AssisiMsg::RangeArray_SensorType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.RangeArray.type)
}

// optional float field_of_view = 3 [default = 0.5236];
inline bool RangeArray::has_field_of_view() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RangeArray::set_has_field_of_view() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RangeArray::clear_has_field_of_view() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RangeArray::clear_field_of_view() {
  field_of_view_ = 0.5236f;
  clear_has_field_of_view();
}
inline float RangeArray::field_of_view() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.RangeArray.field_of_view)
  return field_of_view_;
}
inline void RangeArray::set_field_of_view(float value) {
  set_has_field_of_view();
  field_of_view_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.RangeArray.field_of_view)
}

// optional float min_range = 4 [default = 0];
inline bool RangeArray::has_min_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RangeArray::set_has_min_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RangeArray::clear_has_min_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RangeArray::clear_min_range() {
  min_range_ = 0;
  clear_has_min_range();
}
inline float RangeArray::min_range() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.RangeArray.min_range)
  return min_range_;
}
inline void RangeArray::set_min_range(float value) {
  set_has_min_range();
  min_range_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.RangeArray.min_range)
}

// optional float max_range = 5 [default = inf];
inline bool RangeArray::has_max_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RangeArray::set_has_max_range() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RangeArray::clear_has_max_range() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RangeArray::clear_max_range() {
  max_range_ = static_cast<float>(::google::protobuf::internal::Infinity());
  clear_has_max_range();
}
inline float RangeArray::max_range() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.RangeArray.max_range)
  return max_range_;
}
inline void RangeArray::set_max_range(float value) {
  set_has_max_range();
  max_range_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.RangeArray.max_range)
}

// repeated float range = 6;
inline int RangeArray::range_size() const {
  return range_.size();
}
inline void RangeArray::clear_range() {
  range_.Clear();
}
inline float RangeArray::range(int index) const {
  // @@protoc_insertion_point(field_get:AssisiMsg.RangeArray.range)
  return range_.Get(index);
}
inline void RangeArray::set_range(int index, float value) {
  range_.Set(index, value);
  // @@protoc_insertion_point(field_set:AssisiMsg.RangeArray.range)
}
inline void RangeArray::add_range(float value) {
  range_.Add(value);
  // @@protoc_insertion_point(field_add:AssisiMsg.RangeArray.range)
}
inline const ::google::protobuf::RepeatedField< float >&
RangeArray::range() const {
  // @@protoc_insertion_point(field_list:AssisiMsg.RangeArray.range)
  return range_;
}
inline ::google::protobuf::RepeatedField< float >*
RangeArray::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:AssisiMsg.RangeArray.range)
  return &range_;
}

// repeated float raw_value = 7;
inline int RangeArray::raw_value_size() const {
  return raw_value_.size();
}
inline void RangeArray::clear_raw_value() {
  raw_value_.Clear();
}
inline float RangeArray::raw_value(int index) const {
  // @@protoc_insertion_point(field_get:AssisiMsg.RangeArray.raw_value)
  return raw_value_.Get(index);
}
inline void RangeArray::set_raw_value(int index, float value) {
  raw_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:AssisiMsg.RangeArray.raw_value)
}
inline void RangeArray::add_raw_value(float value) {
  raw_value_.Add(value);
  // @@protoc_insertion_point(field_add:AssisiMsg.RangeArray.raw_value)
}
inline const ::google::protobuf::RepeatedField< float >&
RangeArray::raw_value() const {
  // @@protoc_insertion_point(field_list:AssisiMsg.RangeArray.raw_value)
  return raw_value_;
}
inline ::google::protobuf::RepeatedField< float >*
RangeArray::mutable_raw_value() {
  // @@protoc_insertion_point(field_mutable_list:AssisiMsg.RangeArray.raw_value)
  return &raw_value_;
}

// -------------------------------------------------------------------

// Temperature

// optional .AssisiMsg.Header header = 1;
inline bool Temperature::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Temperature::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Temperature::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Temperature::clear_header() {
  if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  clear_has_header();
}
inline const ::AssisiMsg::Header& Temperature::header() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.Temperature.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::AssisiMsg::Header* Temperature::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::AssisiMsg::Header;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.Temperature.header)
  return header_;
}
inline ::AssisiMsg::Header* Temperature::release_header() {
  clear_has_header();
  ::AssisiMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Temperature::set_allocated_header(::AssisiMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.Temperature.header)
}

// required float temp = 2;
inline bool Temperature::has_temp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Temperature::set_has_temp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Temperature::clear_has_temp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Temperature::clear_temp() {
  temp_ = 0;
  clear_has_temp();
}
inline float Temperature::temp() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.Temperature.temp)
  return temp_;
}
inline void Temperature::set_temp(float value) {
  set_has_temp();
  temp_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.Temperature.temp)
}

// -------------------------------------------------------------------

// TemperatureArray

// optional .AssisiMsg.Header header = 1;
inline bool TemperatureArray::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TemperatureArray::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TemperatureArray::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TemperatureArray::clear_header() {
  if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  clear_has_header();
}
inline const ::AssisiMsg::Header& TemperatureArray::header() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.TemperatureArray.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::AssisiMsg::Header* TemperatureArray::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::AssisiMsg::Header;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.TemperatureArray.header)
  return header_;
}
inline ::AssisiMsg::Header* TemperatureArray::release_header() {
  clear_has_header();
  ::AssisiMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void TemperatureArray::set_allocated_header(::AssisiMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.TemperatureArray.header)
}

// repeated float temp = 2;
inline int TemperatureArray::temp_size() const {
  return temp_.size();
}
inline void TemperatureArray::clear_temp() {
  temp_.Clear();
}
inline float TemperatureArray::temp(int index) const {
  // @@protoc_insertion_point(field_get:AssisiMsg.TemperatureArray.temp)
  return temp_.Get(index);
}
inline void TemperatureArray::set_temp(int index, float value) {
  temp_.Set(index, value);
  // @@protoc_insertion_point(field_set:AssisiMsg.TemperatureArray.temp)
}
inline void TemperatureArray::add_temp(float value) {
  temp_.Add(value);
  // @@protoc_insertion_point(field_add:AssisiMsg.TemperatureArray.temp)
}
inline const ::google::protobuf::RepeatedField< float >&
TemperatureArray::temp() const {
  // @@protoc_insertion_point(field_list:AssisiMsg.TemperatureArray.temp)
  return temp_;
}
inline ::google::protobuf::RepeatedField< float >*
TemperatureArray::mutable_temp() {
  // @@protoc_insertion_point(field_mutable_list:AssisiMsg.TemperatureArray.temp)
  return &temp_;
}

// -------------------------------------------------------------------

// TemperatureWithGradient

// optional .AssisiMsg.Header header = 1;
inline bool TemperatureWithGradient::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TemperatureWithGradient::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TemperatureWithGradient::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TemperatureWithGradient::clear_header() {
  if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  clear_has_header();
}
inline const ::AssisiMsg::Header& TemperatureWithGradient::header() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.TemperatureWithGradient.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::AssisiMsg::Header* TemperatureWithGradient::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::AssisiMsg::Header;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.TemperatureWithGradient.header)
  return header_;
}
inline ::AssisiMsg::Header* TemperatureWithGradient::release_header() {
  clear_has_header();
  ::AssisiMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void TemperatureWithGradient::set_allocated_header(::AssisiMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.TemperatureWithGradient.header)
}

// required float temp = 2;
inline bool TemperatureWithGradient::has_temp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TemperatureWithGradient::set_has_temp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TemperatureWithGradient::clear_has_temp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TemperatureWithGradient::clear_temp() {
  temp_ = 0;
  clear_has_temp();
}
inline float TemperatureWithGradient::temp() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.TemperatureWithGradient.temp)
  return temp_;
}
inline void TemperatureWithGradient::set_temp(float value) {
  set_has_temp();
  temp_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.TemperatureWithGradient.temp)
}

// required float dtx = 3;
inline bool TemperatureWithGradient::has_dtx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TemperatureWithGradient::set_has_dtx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TemperatureWithGradient::clear_has_dtx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TemperatureWithGradient::clear_dtx() {
  dtx_ = 0;
  clear_has_dtx();
}
inline float TemperatureWithGradient::dtx() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.TemperatureWithGradient.dtx)
  return dtx_;
}
inline void TemperatureWithGradient::set_dtx(float value) {
  set_has_dtx();
  dtx_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.TemperatureWithGradient.dtx)
}

// required float dty = 4;
inline bool TemperatureWithGradient::has_dty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TemperatureWithGradient::set_has_dty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TemperatureWithGradient::clear_has_dty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TemperatureWithGradient::clear_dty() {
  dty_ = 0;
  clear_has_dty();
}
inline float TemperatureWithGradient::dty() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.TemperatureWithGradient.dty)
  return dty_;
}
inline void TemperatureWithGradient::set_dty(float value) {
  set_has_dty();
  dty_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.TemperatureWithGradient.dty)
}

// -------------------------------------------------------------------

// VibrationSetpoint

// optional .AssisiMsg.Header header = 1;
inline bool VibrationSetpoint::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VibrationSetpoint::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VibrationSetpoint::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VibrationSetpoint::clear_header() {
  if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  clear_has_header();
}
inline const ::AssisiMsg::Header& VibrationSetpoint::header() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.VibrationSetpoint.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::AssisiMsg::Header* VibrationSetpoint::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::AssisiMsg::Header;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.VibrationSetpoint.header)
  return header_;
}
inline ::AssisiMsg::Header* VibrationSetpoint::release_header() {
  clear_has_header();
  ::AssisiMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void VibrationSetpoint::set_allocated_header(::AssisiMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.VibrationSetpoint.header)
}

// required double freq = 2;
inline bool VibrationSetpoint::has_freq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VibrationSetpoint::set_has_freq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VibrationSetpoint::clear_has_freq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VibrationSetpoint::clear_freq() {
  freq_ = 0;
  clear_has_freq();
}
inline double VibrationSetpoint::freq() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.VibrationSetpoint.freq)
  return freq_;
}
inline void VibrationSetpoint::set_freq(double value) {
  set_has_freq();
  freq_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.VibrationSetpoint.freq)
}

// optional double amplitude = 3;
inline bool VibrationSetpoint::has_amplitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VibrationSetpoint::set_has_amplitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VibrationSetpoint::clear_has_amplitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VibrationSetpoint::clear_amplitude() {
  amplitude_ = 0;
  clear_has_amplitude();
}
inline double VibrationSetpoint::amplitude() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.VibrationSetpoint.amplitude)
  return amplitude_;
}
inline void VibrationSetpoint::set_amplitude(double value) {
  set_has_amplitude();
  amplitude_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.VibrationSetpoint.amplitude)
}

// -------------------------------------------------------------------

// VibrationReading

// optional .AssisiMsg.Header header = 1;
inline bool VibrationReading::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VibrationReading::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VibrationReading::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VibrationReading::clear_header() {
  if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  clear_has_header();
}
inline const ::AssisiMsg::Header& VibrationReading::header() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.VibrationReading.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::AssisiMsg::Header* VibrationReading::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::AssisiMsg::Header;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.VibrationReading.header)
  return header_;
}
inline ::AssisiMsg::Header* VibrationReading::release_header() {
  clear_has_header();
  ::AssisiMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void VibrationReading::set_allocated_header(::AssisiMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.VibrationReading.header)
}

// repeated float freq = 2;
inline int VibrationReading::freq_size() const {
  return freq_.size();
}
inline void VibrationReading::clear_freq() {
  freq_.Clear();
}
inline float VibrationReading::freq(int index) const {
  // @@protoc_insertion_point(field_get:AssisiMsg.VibrationReading.freq)
  return freq_.Get(index);
}
inline void VibrationReading::set_freq(int index, float value) {
  freq_.Set(index, value);
  // @@protoc_insertion_point(field_set:AssisiMsg.VibrationReading.freq)
}
inline void VibrationReading::add_freq(float value) {
  freq_.Add(value);
  // @@protoc_insertion_point(field_add:AssisiMsg.VibrationReading.freq)
}
inline const ::google::protobuf::RepeatedField< float >&
VibrationReading::freq() const {
  // @@protoc_insertion_point(field_list:AssisiMsg.VibrationReading.freq)
  return freq_;
}
inline ::google::protobuf::RepeatedField< float >*
VibrationReading::mutable_freq() {
  // @@protoc_insertion_point(field_mutable_list:AssisiMsg.VibrationReading.freq)
  return &freq_;
}

// repeated float amplitude = 3;
inline int VibrationReading::amplitude_size() const {
  return amplitude_.size();
}
inline void VibrationReading::clear_amplitude() {
  amplitude_.Clear();
}
inline float VibrationReading::amplitude(int index) const {
  // @@protoc_insertion_point(field_get:AssisiMsg.VibrationReading.amplitude)
  return amplitude_.Get(index);
}
inline void VibrationReading::set_amplitude(int index, float value) {
  amplitude_.Set(index, value);
  // @@protoc_insertion_point(field_set:AssisiMsg.VibrationReading.amplitude)
}
inline void VibrationReading::add_amplitude(float value) {
  amplitude_.Add(value);
  // @@protoc_insertion_point(field_add:AssisiMsg.VibrationReading.amplitude)
}
inline const ::google::protobuf::RepeatedField< float >&
VibrationReading::amplitude() const {
  // @@protoc_insertion_point(field_list:AssisiMsg.VibrationReading.amplitude)
  return amplitude_;
}
inline ::google::protobuf::RepeatedField< float >*
VibrationReading::mutable_amplitude() {
  // @@protoc_insertion_point(field_mutable_list:AssisiMsg.VibrationReading.amplitude)
  return &amplitude_;
}

// repeated float amplitude_stdev = 4;
inline int VibrationReading::amplitude_stdev_size() const {
  return amplitude_stdev_.size();
}
inline void VibrationReading::clear_amplitude_stdev() {
  amplitude_stdev_.Clear();
}
inline float VibrationReading::amplitude_stdev(int index) const {
  // @@protoc_insertion_point(field_get:AssisiMsg.VibrationReading.amplitude_stdev)
  return amplitude_stdev_.Get(index);
}
inline void VibrationReading::set_amplitude_stdev(int index, float value) {
  amplitude_stdev_.Set(index, value);
  // @@protoc_insertion_point(field_set:AssisiMsg.VibrationReading.amplitude_stdev)
}
inline void VibrationReading::add_amplitude_stdev(float value) {
  amplitude_stdev_.Add(value);
  // @@protoc_insertion_point(field_add:AssisiMsg.VibrationReading.amplitude_stdev)
}
inline const ::google::protobuf::RepeatedField< float >&
VibrationReading::amplitude_stdev() const {
  // @@protoc_insertion_point(field_list:AssisiMsg.VibrationReading.amplitude_stdev)
  return amplitude_stdev_;
}
inline ::google::protobuf::RepeatedField< float >*
VibrationReading::mutable_amplitude_stdev() {
  // @@protoc_insertion_point(field_mutable_list:AssisiMsg.VibrationReading.amplitude_stdev)
  return &amplitude_stdev_;
}

// -------------------------------------------------------------------

// VibrationReadingArray

// optional .AssisiMsg.Header header = 1;
inline bool VibrationReadingArray::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VibrationReadingArray::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VibrationReadingArray::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VibrationReadingArray::clear_header() {
  if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  clear_has_header();
}
inline const ::AssisiMsg::Header& VibrationReadingArray::header() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.VibrationReadingArray.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::AssisiMsg::Header* VibrationReadingArray::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::AssisiMsg::Header;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.VibrationReadingArray.header)
  return header_;
}
inline ::AssisiMsg::Header* VibrationReadingArray::release_header() {
  clear_has_header();
  ::AssisiMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void VibrationReadingArray::set_allocated_header(::AssisiMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.VibrationReadingArray.header)
}

// repeated .AssisiMsg.VibrationReading reading = 2;
inline int VibrationReadingArray::reading_size() const {
  return reading_.size();
}
inline void VibrationReadingArray::clear_reading() {
  reading_.Clear();
}
inline const ::AssisiMsg::VibrationReading& VibrationReadingArray::reading(int index) const {
  // @@protoc_insertion_point(field_get:AssisiMsg.VibrationReadingArray.reading)
  return reading_.Get(index);
}
inline ::AssisiMsg::VibrationReading* VibrationReadingArray::mutable_reading(int index) {
  // @@protoc_insertion_point(field_mutable:AssisiMsg.VibrationReadingArray.reading)
  return reading_.Mutable(index);
}
inline ::AssisiMsg::VibrationReading* VibrationReadingArray::add_reading() {
  // @@protoc_insertion_point(field_add:AssisiMsg.VibrationReadingArray.reading)
  return reading_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AssisiMsg::VibrationReading >&
VibrationReadingArray::reading() const {
  // @@protoc_insertion_point(field_list:AssisiMsg.VibrationReadingArray.reading)
  return reading_;
}
inline ::google::protobuf::RepeatedPtrField< ::AssisiMsg::VibrationReading >*
VibrationReadingArray::mutable_reading() {
  // @@protoc_insertion_point(field_mutable_list:AssisiMsg.VibrationReadingArray.reading)
  return &reading_;
}

// -------------------------------------------------------------------

// DiffDrive

// optional .AssisiMsg.Header header = 1;
inline bool DiffDrive::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiffDrive::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiffDrive::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiffDrive::clear_header() {
  if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  clear_has_header();
}
inline const ::AssisiMsg::Header& DiffDrive::header() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.DiffDrive.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::AssisiMsg::Header* DiffDrive::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::AssisiMsg::Header;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.DiffDrive.header)
  return header_;
}
inline ::AssisiMsg::Header* DiffDrive::release_header() {
  clear_has_header();
  ::AssisiMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DiffDrive::set_allocated_header(::AssisiMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.DiffDrive.header)
}

// required double vel_left = 2;
inline bool DiffDrive::has_vel_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiffDrive::set_has_vel_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DiffDrive::clear_has_vel_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DiffDrive::clear_vel_left() {
  vel_left_ = 0;
  clear_has_vel_left();
}
inline double DiffDrive::vel_left() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.DiffDrive.vel_left)
  return vel_left_;
}
inline void DiffDrive::set_vel_left(double value) {
  set_has_vel_left();
  vel_left_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.DiffDrive.vel_left)
}

// required double vel_right = 3;
inline bool DiffDrive::has_vel_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DiffDrive::set_has_vel_right() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DiffDrive::clear_has_vel_right() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DiffDrive::clear_vel_right() {
  vel_right_ = 0;
  clear_has_vel_right();
}
inline double DiffDrive::vel_right() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.DiffDrive.vel_right)
  return vel_right_;
}
inline void DiffDrive::set_vel_right(double value) {
  set_has_vel_right();
  vel_right_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.DiffDrive.vel_right)
}

// -------------------------------------------------------------------

// ObjectArray

// optional .AssisiMsg.Header header = 1;
inline bool ObjectArray::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectArray::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectArray::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectArray::clear_header() {
  if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  clear_has_header();
}
inline const ::AssisiMsg::Header& ObjectArray::header() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.ObjectArray.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::AssisiMsg::Header* ObjectArray::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::AssisiMsg::Header;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.ObjectArray.header)
  return header_;
}
inline ::AssisiMsg::Header* ObjectArray::release_header() {
  clear_has_header();
  ::AssisiMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void ObjectArray::set_allocated_header(::AssisiMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.ObjectArray.header)
}

// optional float field_of_view = 3 [default = 0.5236];
inline bool ObjectArray::has_field_of_view() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectArray::set_has_field_of_view() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectArray::clear_has_field_of_view() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjectArray::clear_field_of_view() {
  field_of_view_ = 0.5236f;
  clear_has_field_of_view();
}
inline float ObjectArray::field_of_view() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.ObjectArray.field_of_view)
  return field_of_view_;
}
inline void ObjectArray::set_field_of_view(float value) {
  set_has_field_of_view();
  field_of_view_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.ObjectArray.field_of_view)
}

// optional float min_range = 4 [default = 0];
inline bool ObjectArray::has_min_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectArray::set_has_min_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectArray::clear_has_min_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjectArray::clear_min_range() {
  min_range_ = 0;
  clear_has_min_range();
}
inline float ObjectArray::min_range() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.ObjectArray.min_range)
  return min_range_;
}
inline void ObjectArray::set_min_range(float value) {
  set_has_min_range();
  min_range_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.ObjectArray.min_range)
}

// optional float max_range = 5 [default = inf];
inline bool ObjectArray::has_max_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjectArray::set_has_max_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjectArray::clear_has_max_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjectArray::clear_max_range() {
  max_range_ = static_cast<float>(::google::protobuf::internal::Infinity());
  clear_has_max_range();
}
inline float ObjectArray::max_range() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.ObjectArray.max_range)
  return max_range_;
}
inline void ObjectArray::set_max_range(float value) {
  set_has_max_range();
  max_range_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.ObjectArray.max_range)
}

// repeated float range = 6;
inline int ObjectArray::range_size() const {
  return range_.size();
}
inline void ObjectArray::clear_range() {
  range_.Clear();
}
inline float ObjectArray::range(int index) const {
  // @@protoc_insertion_point(field_get:AssisiMsg.ObjectArray.range)
  return range_.Get(index);
}
inline void ObjectArray::set_range(int index, float value) {
  range_.Set(index, value);
  // @@protoc_insertion_point(field_set:AssisiMsg.ObjectArray.range)
}
inline void ObjectArray::add_range(float value) {
  range_.Add(value);
  // @@protoc_insertion_point(field_add:AssisiMsg.ObjectArray.range)
}
inline const ::google::protobuf::RepeatedField< float >&
ObjectArray::range() const {
  // @@protoc_insertion_point(field_list:AssisiMsg.ObjectArray.range)
  return range_;
}
inline ::google::protobuf::RepeatedField< float >*
ObjectArray::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:AssisiMsg.ObjectArray.range)
  return &range_;
}

// repeated string type = 7;
inline int ObjectArray::type_size() const {
  return type_.size();
}
inline void ObjectArray::clear_type() {
  type_.Clear();
}
inline const ::std::string& ObjectArray::type(int index) const {
  // @@protoc_insertion_point(field_get:AssisiMsg.ObjectArray.type)
  return type_.Get(index);
}
inline ::std::string* ObjectArray::mutable_type(int index) {
  // @@protoc_insertion_point(field_mutable:AssisiMsg.ObjectArray.type)
  return type_.Mutable(index);
}
inline void ObjectArray::set_type(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AssisiMsg.ObjectArray.type)
  type_.Mutable(index)->assign(value);
}
inline void ObjectArray::set_type(int index, const char* value) {
  type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AssisiMsg.ObjectArray.type)
}
inline void ObjectArray::set_type(int index, const char* value, size_t size) {
  type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AssisiMsg.ObjectArray.type)
}
inline ::std::string* ObjectArray::add_type() {
  return type_.Add();
}
inline void ObjectArray::add_type(const ::std::string& value) {
  type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AssisiMsg.ObjectArray.type)
}
inline void ObjectArray::add_type(const char* value) {
  type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AssisiMsg.ObjectArray.type)
}
inline void ObjectArray::add_type(const char* value, size_t size) {
  type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AssisiMsg.ObjectArray.type)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ObjectArray::type() const {
  // @@protoc_insertion_point(field_list:AssisiMsg.ObjectArray.type)
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ObjectArray::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:AssisiMsg.ObjectArray.type)
  return &type_;
}

// -------------------------------------------------------------------

// Airflow

// optional .AssisiMsg.Header header = 1;
inline bool Airflow::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Airflow::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Airflow::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Airflow::clear_header() {
  if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  clear_has_header();
}
inline const ::AssisiMsg::Header& Airflow::header() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.Airflow.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::AssisiMsg::Header* Airflow::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::AssisiMsg::Header;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.Airflow.header)
  return header_;
}
inline ::AssisiMsg::Header* Airflow::release_header() {
  clear_has_header();
  ::AssisiMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Airflow::set_allocated_header(::AssisiMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.Airflow.header)
}

// required float intensity = 2;
inline bool Airflow::has_intensity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Airflow::set_has_intensity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Airflow::clear_has_intensity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Airflow::clear_intensity() {
  intensity_ = 0;
  clear_has_intensity();
}
inline float Airflow::intensity() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.Airflow.intensity)
  return intensity_;
}
inline void Airflow::set_intensity(float value) {
  set_has_intensity();
  intensity_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.Airflow.intensity)
}

// -------------------------------------------------------------------

// AirflowReading

// optional .AssisiMsg.Header header = 1;
inline bool AirflowReading::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AirflowReading::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AirflowReading::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AirflowReading::clear_header() {
  if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  clear_has_header();
}
inline const ::AssisiMsg::Header& AirflowReading::header() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.AirflowReading.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::AssisiMsg::Header* AirflowReading::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::AssisiMsg::Header;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.AirflowReading.header)
  return header_;
}
inline ::AssisiMsg::Header* AirflowReading::release_header() {
  clear_has_header();
  ::AssisiMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void AirflowReading::set_allocated_header(::AssisiMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.AirflowReading.header)
}

// required float intensity = 2;
inline bool AirflowReading::has_intensity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AirflowReading::set_has_intensity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AirflowReading::clear_has_intensity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AirflowReading::clear_intensity() {
  intensity_ = 0;
  clear_has_intensity();
}
inline float AirflowReading::intensity() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.AirflowReading.intensity)
  return intensity_;
}
inline void AirflowReading::set_intensity(float value) {
  set_has_intensity();
  intensity_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.AirflowReading.intensity)
}

// required float direction = 3;
inline bool AirflowReading::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AirflowReading::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AirflowReading::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AirflowReading::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline float AirflowReading::direction() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.AirflowReading.direction)
  return direction_;
}
inline void AirflowReading::set_direction(float value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:AssisiMsg.AirflowReading.direction)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AssisiMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::AssisiMsg::RangeArray_SensorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AssisiMsg::RangeArray_SensorType>() {
  return ::AssisiMsg::RangeArray_SensorType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dev_5fmsgs_2eproto__INCLUDED
