// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sim_msgs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sim_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AssisiMsg {

namespace {

const ::google::protobuf::Descriptor* Spawn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Spawn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sim_5fmsgs_2eproto() {
  protobuf_AddDesc_sim_5fmsgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sim_msgs.proto");
  GOOGLE_CHECK(file != NULL);
  Spawn_descriptor_ = file->message_type(0);
  static const int Spawn_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawn, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawn, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawn, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawn, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawn, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawn, polygon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawn, cylinder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawn, color_),
  };
  Spawn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Spawn_descriptor_,
      Spawn::default_instance_,
      Spawn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Spawn));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sim_5fmsgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Spawn_descriptor_, &Spawn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sim_5fmsgs_2eproto() {
  delete Spawn::default_instance_;
  delete Spawn_reflection_;
}

void protobuf_AddDesc_sim_5fmsgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::AssisiMsg::protobuf_AddDesc_base_5fmsgs_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016sim_msgs.proto\022\tAssisiMsg\032\017base_msgs.p"
    "roto\"\366\001\n\005Spawn\022!\n\006header\030\001 \001(\0132\021.AssisiM"
    "sg.Header\022\014\n\004type\030\002 \002(\t\022\014\n\004name\030\003 \002(\t\022\035\n"
    "\004pose\030\004 \002(\0132\017.AssisiMsg.Pose\022\"\n\010velocity"
    "\030\005 \001(\0132\020.AssisiMsg.Twist\022#\n\007polygon\030\006 \001("
    "\0132\022.AssisiMsg.Polygon\022%\n\010cylinder\030\007 \001(\0132"
    "\023.AssisiMsg.Cylinder\022\037\n\005color\030\010 \001(\0132\020.As"
    "sisiMsg.Color", 293);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sim_msgs.proto", &protobuf_RegisterTypes);
  Spawn::default_instance_ = new Spawn();
  Spawn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sim_5fmsgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sim_5fmsgs_2eproto {
  StaticDescriptorInitializer_sim_5fmsgs_2eproto() {
    protobuf_AddDesc_sim_5fmsgs_2eproto();
  }
} static_descriptor_initializer_sim_5fmsgs_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Spawn::kHeaderFieldNumber;
const int Spawn::kTypeFieldNumber;
const int Spawn::kNameFieldNumber;
const int Spawn::kPoseFieldNumber;
const int Spawn::kVelocityFieldNumber;
const int Spawn::kPolygonFieldNumber;
const int Spawn::kCylinderFieldNumber;
const int Spawn::kColorFieldNumber;
#endif  // !_MSC_VER

Spawn::Spawn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AssisiMsg.Spawn)
}

void Spawn::InitAsDefaultInstance() {
  header_ = const_cast< ::AssisiMsg::Header*>(&::AssisiMsg::Header::default_instance());
  pose_ = const_cast< ::AssisiMsg::Pose*>(&::AssisiMsg::Pose::default_instance());
  velocity_ = const_cast< ::AssisiMsg::Twist*>(&::AssisiMsg::Twist::default_instance());
  polygon_ = const_cast< ::AssisiMsg::Polygon*>(&::AssisiMsg::Polygon::default_instance());
  cylinder_ = const_cast< ::AssisiMsg::Cylinder*>(&::AssisiMsg::Cylinder::default_instance());
  color_ = const_cast< ::AssisiMsg::Color*>(&::AssisiMsg::Color::default_instance());
}

Spawn::Spawn(const Spawn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AssisiMsg.Spawn)
}

void Spawn::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pose_ = NULL;
  velocity_ = NULL;
  polygon_ = NULL;
  cylinder_ = NULL;
  color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Spawn::~Spawn() {
  // @@protoc_insertion_point(destructor:AssisiMsg.Spawn)
  SharedDtor();
}

void Spawn::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete header_;
    delete pose_;
    delete velocity_;
    delete polygon_;
    delete cylinder_;
    delete color_;
  }
}

void Spawn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Spawn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Spawn_descriptor_;
}

const Spawn& Spawn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sim_5fmsgs_2eproto();
  return *default_instance_;
}

Spawn* Spawn::default_instance_ = NULL;

Spawn* Spawn::New() const {
  return new Spawn;
}

void Spawn::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_header()) {
      if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::AssisiMsg::Pose::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::AssisiMsg::Twist::Clear();
    }
    if (has_polygon()) {
      if (polygon_ != NULL) polygon_->::AssisiMsg::Polygon::Clear();
    }
    if (has_cylinder()) {
      if (cylinder_ != NULL) cylinder_->::AssisiMsg::Cylinder::Clear();
    }
    if (has_color()) {
      if (color_ != NULL) color_->::AssisiMsg::Color::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Spawn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AssisiMsg.Spawn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AssisiMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pose;
        break;
      }

      // required .AssisiMsg.Pose pose = 4;
      case 4: {
        if (tag == 34) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_velocity;
        break;
      }

      // optional .AssisiMsg.Twist velocity = 5;
      case 5: {
        if (tag == 42) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_polygon;
        break;
      }

      // optional .AssisiMsg.Polygon polygon = 6;
      case 6: {
        if (tag == 50) {
         parse_polygon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cylinder;
        break;
      }

      // optional .AssisiMsg.Cylinder cylinder = 7;
      case 7: {
        if (tag == 58) {
         parse_cylinder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cylinder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_color;
        break;
      }

      // optional .AssisiMsg.Color color = 8;
      case 8: {
        if (tag == 66) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AssisiMsg.Spawn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AssisiMsg.Spawn)
  return false;
#undef DO_
}

void Spawn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AssisiMsg.Spawn)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required .AssisiMsg.Pose pose = 4;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pose(), output);
  }

  // optional .AssisiMsg.Twist velocity = 5;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->velocity(), output);
  }

  // optional .AssisiMsg.Polygon polygon = 6;
  if (has_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->polygon(), output);
  }

  // optional .AssisiMsg.Cylinder cylinder = 7;
  if (has_cylinder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cylinder(), output);
  }

  // optional .AssisiMsg.Color color = 8;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AssisiMsg.Spawn)
}

::google::protobuf::uint8* Spawn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssisiMsg.Spawn)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required .AssisiMsg.Pose pose = 4;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pose(), target);
  }

  // optional .AssisiMsg.Twist velocity = 5;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->velocity(), target);
  }

  // optional .AssisiMsg.Polygon polygon = 6;
  if (has_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->polygon(), target);
  }

  // optional .AssisiMsg.Cylinder cylinder = 7;
  if (has_cylinder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->cylinder(), target);
  }

  // optional .AssisiMsg.Color color = 8;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssisiMsg.Spawn)
  return target;
}

int Spawn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AssisiMsg.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .AssisiMsg.Pose pose = 4;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

    // optional .AssisiMsg.Twist velocity = 5;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // optional .AssisiMsg.Polygon polygon = 6;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon());
    }

    // optional .AssisiMsg.Cylinder cylinder = 7;
    if (has_cylinder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cylinder());
    }

    // optional .AssisiMsg.Color color = 8;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Spawn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Spawn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Spawn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Spawn::MergeFrom(const Spawn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::AssisiMsg::Header::MergeFrom(from.header());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pose()) {
      mutable_pose()->::AssisiMsg::Pose::MergeFrom(from.pose());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::AssisiMsg::Twist::MergeFrom(from.velocity());
    }
    if (from.has_polygon()) {
      mutable_polygon()->::AssisiMsg::Polygon::MergeFrom(from.polygon());
    }
    if (from.has_cylinder()) {
      mutable_cylinder()->::AssisiMsg::Cylinder::MergeFrom(from.cylinder());
    }
    if (from.has_color()) {
      mutable_color()->::AssisiMsg::Color::MergeFrom(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Spawn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spawn::CopyFrom(const Spawn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spawn::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  if (has_polygon()) {
    if (!this->polygon().IsInitialized()) return false;
  }
  if (has_cylinder()) {
    if (!this->cylinder().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void Spawn::Swap(Spawn* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(pose_, other->pose_);
    std::swap(velocity_, other->velocity_);
    std::swap(polygon_, other->polygon_);
    std::swap(cylinder_, other->cylinder_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Spawn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Spawn_descriptor_;
  metadata.reflection = Spawn_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AssisiMsg

// @@protoc_insertion_point(global_scope)
