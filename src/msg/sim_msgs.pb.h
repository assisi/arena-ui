// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sim_msgs.proto

#ifndef PROTOBUF_sim_5fmsgs_2eproto__INCLUDED
#define PROTOBUF_sim_5fmsgs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_msgs.pb.h"
// @@protoc_insertion_point(includes)

namespace AssisiMsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sim_5fmsgs_2eproto();
void protobuf_AssignDesc_sim_5fmsgs_2eproto();
void protobuf_ShutdownFile_sim_5fmsgs_2eproto();

class Spawn;

// ===================================================================

class Spawn : public ::google::protobuf::Message {
 public:
  Spawn();
  virtual ~Spawn();

  Spawn(const Spawn& from);

  inline Spawn& operator=(const Spawn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Spawn& default_instance();

  void Swap(Spawn* other);

  // implements Message ----------------------------------------------

  Spawn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Spawn& from);
  void MergeFrom(const Spawn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AssisiMsg.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::AssisiMsg::Header& header() const;
  inline ::AssisiMsg::Header* mutable_header();
  inline ::AssisiMsg::Header* release_header();
  inline void set_allocated_header(::AssisiMsg::Header* header);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .AssisiMsg.Pose pose = 4;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 4;
  inline const ::AssisiMsg::Pose& pose() const;
  inline ::AssisiMsg::Pose* mutable_pose();
  inline ::AssisiMsg::Pose* release_pose();
  inline void set_allocated_pose(::AssisiMsg::Pose* pose);

  // optional .AssisiMsg.Twist velocity = 5;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 5;
  inline const ::AssisiMsg::Twist& velocity() const;
  inline ::AssisiMsg::Twist* mutable_velocity();
  inline ::AssisiMsg::Twist* release_velocity();
  inline void set_allocated_velocity(::AssisiMsg::Twist* velocity);

  // optional .AssisiMsg.Polygon polygon = 6;
  inline bool has_polygon() const;
  inline void clear_polygon();
  static const int kPolygonFieldNumber = 6;
  inline const ::AssisiMsg::Polygon& polygon() const;
  inline ::AssisiMsg::Polygon* mutable_polygon();
  inline ::AssisiMsg::Polygon* release_polygon();
  inline void set_allocated_polygon(::AssisiMsg::Polygon* polygon);

  // optional .AssisiMsg.Cylinder cylinder = 7;
  inline bool has_cylinder() const;
  inline void clear_cylinder();
  static const int kCylinderFieldNumber = 7;
  inline const ::AssisiMsg::Cylinder& cylinder() const;
  inline ::AssisiMsg::Cylinder* mutable_cylinder();
  inline ::AssisiMsg::Cylinder* release_cylinder();
  inline void set_allocated_cylinder(::AssisiMsg::Cylinder* cylinder);

  // optional .AssisiMsg.Color color = 8;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 8;
  inline const ::AssisiMsg::Color& color() const;
  inline ::AssisiMsg::Color* mutable_color();
  inline ::AssisiMsg::Color* release_color();
  inline void set_allocated_color(::AssisiMsg::Color* color);

  // @@protoc_insertion_point(class_scope:AssisiMsg.Spawn)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_polygon();
  inline void clear_has_polygon();
  inline void set_has_cylinder();
  inline void clear_has_cylinder();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AssisiMsg::Header* header_;
  ::std::string* type_;
  ::std::string* name_;
  ::AssisiMsg::Pose* pose_;
  ::AssisiMsg::Twist* velocity_;
  ::AssisiMsg::Polygon* polygon_;
  ::AssisiMsg::Cylinder* cylinder_;
  ::AssisiMsg::Color* color_;
  friend void  protobuf_AddDesc_sim_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_sim_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_sim_5fmsgs_2eproto();

  void InitAsDefaultInstance();
  static Spawn* default_instance_;
};
// ===================================================================


// ===================================================================

// Spawn

// optional .AssisiMsg.Header header = 1;
inline bool Spawn::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Spawn::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Spawn::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Spawn::clear_header() {
  if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  clear_has_header();
}
inline const ::AssisiMsg::Header& Spawn::header() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.Spawn.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::AssisiMsg::Header* Spawn::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::AssisiMsg::Header;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.Spawn.header)
  return header_;
}
inline ::AssisiMsg::Header* Spawn::release_header() {
  clear_has_header();
  ::AssisiMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Spawn::set_allocated_header(::AssisiMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.Spawn.header)
}

// required string type = 2;
inline bool Spawn::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Spawn::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Spawn::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Spawn::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Spawn::type() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.Spawn.type)
  return *type_;
}
inline void Spawn::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:AssisiMsg.Spawn.type)
}
inline void Spawn::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:AssisiMsg.Spawn.type)
}
inline void Spawn::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AssisiMsg.Spawn.type)
}
inline ::std::string* Spawn::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AssisiMsg.Spawn.type)
  return type_;
}
inline ::std::string* Spawn::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Spawn::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.Spawn.type)
}

// required string name = 3;
inline bool Spawn::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Spawn::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Spawn::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Spawn::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Spawn::name() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.Spawn.name)
  return *name_;
}
inline void Spawn::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:AssisiMsg.Spawn.name)
}
inline void Spawn::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AssisiMsg.Spawn.name)
}
inline void Spawn::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AssisiMsg.Spawn.name)
}
inline ::std::string* Spawn::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AssisiMsg.Spawn.name)
  return name_;
}
inline ::std::string* Spawn::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Spawn::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.Spawn.name)
}

// required .AssisiMsg.Pose pose = 4;
inline bool Spawn::has_pose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Spawn::set_has_pose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Spawn::clear_has_pose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Spawn::clear_pose() {
  if (pose_ != NULL) pose_->::AssisiMsg::Pose::Clear();
  clear_has_pose();
}
inline const ::AssisiMsg::Pose& Spawn::pose() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.Spawn.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::AssisiMsg::Pose* Spawn::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::AssisiMsg::Pose;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.Spawn.pose)
  return pose_;
}
inline ::AssisiMsg::Pose* Spawn::release_pose() {
  clear_has_pose();
  ::AssisiMsg::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Spawn::set_allocated_pose(::AssisiMsg::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.Spawn.pose)
}

// optional .AssisiMsg.Twist velocity = 5;
inline bool Spawn::has_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Spawn::set_has_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Spawn::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Spawn::clear_velocity() {
  if (velocity_ != NULL) velocity_->::AssisiMsg::Twist::Clear();
  clear_has_velocity();
}
inline const ::AssisiMsg::Twist& Spawn::velocity() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.Spawn.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::AssisiMsg::Twist* Spawn::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::AssisiMsg::Twist;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.Spawn.velocity)
  return velocity_;
}
inline ::AssisiMsg::Twist* Spawn::release_velocity() {
  clear_has_velocity();
  ::AssisiMsg::Twist* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void Spawn::set_allocated_velocity(::AssisiMsg::Twist* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.Spawn.velocity)
}

// optional .AssisiMsg.Polygon polygon = 6;
inline bool Spawn::has_polygon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Spawn::set_has_polygon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Spawn::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Spawn::clear_polygon() {
  if (polygon_ != NULL) polygon_->::AssisiMsg::Polygon::Clear();
  clear_has_polygon();
}
inline const ::AssisiMsg::Polygon& Spawn::polygon() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.Spawn.polygon)
  return polygon_ != NULL ? *polygon_ : *default_instance_->polygon_;
}
inline ::AssisiMsg::Polygon* Spawn::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) polygon_ = new ::AssisiMsg::Polygon;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.Spawn.polygon)
  return polygon_;
}
inline ::AssisiMsg::Polygon* Spawn::release_polygon() {
  clear_has_polygon();
  ::AssisiMsg::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline void Spawn::set_allocated_polygon(::AssisiMsg::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.Spawn.polygon)
}

// optional .AssisiMsg.Cylinder cylinder = 7;
inline bool Spawn::has_cylinder() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Spawn::set_has_cylinder() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Spawn::clear_has_cylinder() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Spawn::clear_cylinder() {
  if (cylinder_ != NULL) cylinder_->::AssisiMsg::Cylinder::Clear();
  clear_has_cylinder();
}
inline const ::AssisiMsg::Cylinder& Spawn::cylinder() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.Spawn.cylinder)
  return cylinder_ != NULL ? *cylinder_ : *default_instance_->cylinder_;
}
inline ::AssisiMsg::Cylinder* Spawn::mutable_cylinder() {
  set_has_cylinder();
  if (cylinder_ == NULL) cylinder_ = new ::AssisiMsg::Cylinder;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.Spawn.cylinder)
  return cylinder_;
}
inline ::AssisiMsg::Cylinder* Spawn::release_cylinder() {
  clear_has_cylinder();
  ::AssisiMsg::Cylinder* temp = cylinder_;
  cylinder_ = NULL;
  return temp;
}
inline void Spawn::set_allocated_cylinder(::AssisiMsg::Cylinder* cylinder) {
  delete cylinder_;
  cylinder_ = cylinder;
  if (cylinder) {
    set_has_cylinder();
  } else {
    clear_has_cylinder();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.Spawn.cylinder)
}

// optional .AssisiMsg.Color color = 8;
inline bool Spawn::has_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Spawn::set_has_color() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Spawn::clear_has_color() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Spawn::clear_color() {
  if (color_ != NULL) color_->::AssisiMsg::Color::Clear();
  clear_has_color();
}
inline const ::AssisiMsg::Color& Spawn::color() const {
  // @@protoc_insertion_point(field_get:AssisiMsg.Spawn.color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::AssisiMsg::Color* Spawn::mutable_color() {
  set_has_color();
  if (color_ == NULL) color_ = new ::AssisiMsg::Color;
  // @@protoc_insertion_point(field_mutable:AssisiMsg.Spawn.color)
  return color_;
}
inline ::AssisiMsg::Color* Spawn::release_color() {
  clear_has_color();
  ::AssisiMsg::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline void Spawn::set_allocated_color(::AssisiMsg::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    set_has_color();
  } else {
    clear_has_color();
  }
  // @@protoc_insertion_point(field_set_allocated:AssisiMsg.Spawn.color)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AssisiMsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sim_5fmsgs_2eproto__INCLUDED
