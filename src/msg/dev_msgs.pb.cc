// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dev_msgs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dev_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AssisiMsg {

namespace {

const ::google::protobuf::Descriptor* RangeArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeArray_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RangeArray_SensorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Temperature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Temperature_reflection_ = NULL;
const ::google::protobuf::Descriptor* TemperatureArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TemperatureArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* TemperatureWithGradient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TemperatureWithGradient_reflection_ = NULL;
const ::google::protobuf::Descriptor* VibrationSetpoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VibrationSetpoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* VibrationReading_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VibrationReading_reflection_ = NULL;
const ::google::protobuf::Descriptor* VibrationReadingArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VibrationReadingArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiffDrive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiffDrive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* Airflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Airflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* AirflowReading_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AirflowReading_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dev_5fmsgs_2eproto() {
  protobuf_AddDesc_dev_5fmsgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dev_msgs.proto");
  GOOGLE_CHECK(file != NULL);
  RangeArray_descriptor_ = file->message_type(0);
  static const int RangeArray_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeArray, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeArray, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeArray, field_of_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeArray, min_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeArray, max_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeArray, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeArray, raw_value_),
  };
  RangeArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeArray_descriptor_,
      RangeArray::default_instance_,
      RangeArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeArray));
  RangeArray_SensorType_descriptor_ = RangeArray_descriptor_->enum_type(0);
  Temperature_descriptor_ = file->message_type(1);
  static const int Temperature_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Temperature, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Temperature, temp_),
  };
  Temperature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Temperature_descriptor_,
      Temperature::default_instance_,
      Temperature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Temperature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Temperature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Temperature));
  TemperatureArray_descriptor_ = file->message_type(2);
  static const int TemperatureArray_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureArray, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureArray, temp_),
  };
  TemperatureArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TemperatureArray_descriptor_,
      TemperatureArray::default_instance_,
      TemperatureArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TemperatureArray));
  TemperatureWithGradient_descriptor_ = file->message_type(3);
  static const int TemperatureWithGradient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureWithGradient, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureWithGradient, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureWithGradient, dtx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureWithGradient, dty_),
  };
  TemperatureWithGradient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TemperatureWithGradient_descriptor_,
      TemperatureWithGradient::default_instance_,
      TemperatureWithGradient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureWithGradient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureWithGradient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TemperatureWithGradient));
  VibrationSetpoint_descriptor_ = file->message_type(4);
  static const int VibrationSetpoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationSetpoint, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationSetpoint, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationSetpoint, amplitude_),
  };
  VibrationSetpoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VibrationSetpoint_descriptor_,
      VibrationSetpoint::default_instance_,
      VibrationSetpoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationSetpoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationSetpoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VibrationSetpoint));
  VibrationReading_descriptor_ = file->message_type(5);
  static const int VibrationReading_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationReading, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationReading, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationReading, amplitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationReading, amplitude_stdev_),
  };
  VibrationReading_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VibrationReading_descriptor_,
      VibrationReading::default_instance_,
      VibrationReading_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationReading, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationReading, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VibrationReading));
  VibrationReadingArray_descriptor_ = file->message_type(6);
  static const int VibrationReadingArray_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationReadingArray, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationReadingArray, reading_),
  };
  VibrationReadingArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VibrationReadingArray_descriptor_,
      VibrationReadingArray::default_instance_,
      VibrationReadingArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationReadingArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibrationReadingArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VibrationReadingArray));
  DiffDrive_descriptor_ = file->message_type(7);
  static const int DiffDrive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiffDrive, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiffDrive, vel_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiffDrive, vel_right_),
  };
  DiffDrive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiffDrive_descriptor_,
      DiffDrive::default_instance_,
      DiffDrive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiffDrive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiffDrive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiffDrive));
  ObjectArray_descriptor_ = file->message_type(8);
  static const int ObjectArray_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectArray, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectArray, field_of_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectArray, min_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectArray, max_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectArray, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectArray, type_),
  };
  ObjectArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectArray_descriptor_,
      ObjectArray::default_instance_,
      ObjectArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectArray));
  Airflow_descriptor_ = file->message_type(9);
  static const int Airflow_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Airflow, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Airflow, intensity_),
  };
  Airflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Airflow_descriptor_,
      Airflow::default_instance_,
      Airflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Airflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Airflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Airflow));
  AirflowReading_descriptor_ = file->message_type(10);
  static const int AirflowReading_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirflowReading, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirflowReading, intensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirflowReading, direction_),
  };
  AirflowReading_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AirflowReading_descriptor_,
      AirflowReading::default_instance_,
      AirflowReading_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirflowReading, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirflowReading, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AirflowReading));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dev_5fmsgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeArray_descriptor_, &RangeArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Temperature_descriptor_, &Temperature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TemperatureArray_descriptor_, &TemperatureArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TemperatureWithGradient_descriptor_, &TemperatureWithGradient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VibrationSetpoint_descriptor_, &VibrationSetpoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VibrationReading_descriptor_, &VibrationReading::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VibrationReadingArray_descriptor_, &VibrationReadingArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiffDrive_descriptor_, &DiffDrive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectArray_descriptor_, &ObjectArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Airflow_descriptor_, &Airflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AirflowReading_descriptor_, &AirflowReading::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dev_5fmsgs_2eproto() {
  delete RangeArray::default_instance_;
  delete RangeArray_reflection_;
  delete Temperature::default_instance_;
  delete Temperature_reflection_;
  delete TemperatureArray::default_instance_;
  delete TemperatureArray_reflection_;
  delete TemperatureWithGradient::default_instance_;
  delete TemperatureWithGradient_reflection_;
  delete VibrationSetpoint::default_instance_;
  delete VibrationSetpoint_reflection_;
  delete VibrationReading::default_instance_;
  delete VibrationReading_reflection_;
  delete VibrationReadingArray::default_instance_;
  delete VibrationReadingArray_reflection_;
  delete DiffDrive::default_instance_;
  delete DiffDrive_reflection_;
  delete ObjectArray::default_instance_;
  delete ObjectArray_reflection_;
  delete Airflow::default_instance_;
  delete Airflow_reflection_;
  delete AirflowReading::default_instance_;
  delete AirflowReading_reflection_;
}

void protobuf_AddDesc_dev_5fmsgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::AssisiMsg::protobuf_AddDesc_base_5fmsgs_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016dev_msgs.proto\022\tAssisiMsg\032\017base_msgs.p"
    "roto\"\350\001\n\nRangeArray\022!\n\006header\030\001 \001(\0132\021.As"
    "sisiMsg.Header\0222\n\004type\030\002 \001(\0162 .AssisiMsg"
    ".RangeArray.SensorType:\002IR\022\035\n\rfield_of_v"
    "iew\030\003 \001(\002:\0060.5236\022\024\n\tmin_range\030\004 \001(\002:\0010\022"
    "\026\n\tmax_range\030\005 \001(\002:\003inf\022\r\n\005range\030\006 \003(\002\022\021"
    "\n\traw_value\030\007 \003(\002\"\024\n\nSensorType\022\006\n\002IR\020\000\""
    ">\n\013Temperature\022!\n\006header\030\001 \001(\0132\021.AssisiM"
    "sg.Header\022\014\n\004temp\030\002 \002(\002\"C\n\020TemperatureAr"
    "ray\022!\n\006header\030\001 \001(\0132\021.AssisiMsg.Header\022\014"
    "\n\004temp\030\002 \003(\002\"d\n\027TemperatureWithGradient\022"
    "!\n\006header\030\001 \001(\0132\021.AssisiMsg.Header\022\014\n\004te"
    "mp\030\002 \002(\002\022\013\n\003dtx\030\003 \002(\002\022\013\n\003dty\030\004 \002(\002\"W\n\021Vi"
    "brationSetpoint\022!\n\006header\030\001 \001(\0132\021.Assisi"
    "Msg.Header\022\014\n\004freq\030\002 \002(\001\022\021\n\tamplitude\030\003 "
    "\001(\001\"o\n\020VibrationReading\022!\n\006header\030\001 \001(\0132"
    "\021.AssisiMsg.Header\022\014\n\004freq\030\002 \003(\002\022\021\n\tampl"
    "itude\030\003 \003(\002\022\027\n\017amplitude_stdev\030\004 \003(\002\"h\n\025"
    "VibrationReadingArray\022!\n\006header\030\001 \001(\0132\021."
    "AssisiMsg.Header\022,\n\007reading\030\002 \003(\0132\033.Assi"
    "siMsg.VibrationReading\"S\n\tDiffDrive\022!\n\006h"
    "eader\030\001 \001(\0132\021.AssisiMsg.Header\022\020\n\010vel_le"
    "ft\030\002 \002(\001\022\021\n\tvel_right\030\003 \002(\001\"\232\001\n\013ObjectAr"
    "ray\022!\n\006header\030\001 \001(\0132\021.AssisiMsg.Header\022\035"
    "\n\rfield_of_view\030\003 \001(\002:\0060.5236\022\024\n\tmin_ran"
    "ge\030\004 \001(\002:\0010\022\026\n\tmax_range\030\005 \001(\002:\003inf\022\r\n\005r"
    "ange\030\006 \003(\002\022\014\n\004type\030\007 \003(\t\"\?\n\007Airflow\022!\n\006h"
    "eader\030\001 \001(\0132\021.AssisiMsg.Header\022\021\n\tintens"
    "ity\030\002 \002(\002\"Y\n\016AirflowReading\022!\n\006header\030\001 "
    "\001(\0132\021.AssisiMsg.Header\022\021\n\tintensity\030\002 \002("
    "\002\022\021\n\tdirection\030\003 \002(\002", 1220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dev_msgs.proto", &protobuf_RegisterTypes);
  RangeArray::default_instance_ = new RangeArray();
  Temperature::default_instance_ = new Temperature();
  TemperatureArray::default_instance_ = new TemperatureArray();
  TemperatureWithGradient::default_instance_ = new TemperatureWithGradient();
  VibrationSetpoint::default_instance_ = new VibrationSetpoint();
  VibrationReading::default_instance_ = new VibrationReading();
  VibrationReadingArray::default_instance_ = new VibrationReadingArray();
  DiffDrive::default_instance_ = new DiffDrive();
  ObjectArray::default_instance_ = new ObjectArray();
  Airflow::default_instance_ = new Airflow();
  AirflowReading::default_instance_ = new AirflowReading();
  RangeArray::default_instance_->InitAsDefaultInstance();
  Temperature::default_instance_->InitAsDefaultInstance();
  TemperatureArray::default_instance_->InitAsDefaultInstance();
  TemperatureWithGradient::default_instance_->InitAsDefaultInstance();
  VibrationSetpoint::default_instance_->InitAsDefaultInstance();
  VibrationReading::default_instance_->InitAsDefaultInstance();
  VibrationReadingArray::default_instance_->InitAsDefaultInstance();
  DiffDrive::default_instance_->InitAsDefaultInstance();
  ObjectArray::default_instance_->InitAsDefaultInstance();
  Airflow::default_instance_->InitAsDefaultInstance();
  AirflowReading::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dev_5fmsgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dev_5fmsgs_2eproto {
  StaticDescriptorInitializer_dev_5fmsgs_2eproto() {
    protobuf_AddDesc_dev_5fmsgs_2eproto();
  }
} static_descriptor_initializer_dev_5fmsgs_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RangeArray_SensorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeArray_SensorType_descriptor_;
}
bool RangeArray_SensorType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RangeArray_SensorType RangeArray::IR;
const RangeArray_SensorType RangeArray::SensorType_MIN;
const RangeArray_SensorType RangeArray::SensorType_MAX;
const int RangeArray::SensorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RangeArray::kHeaderFieldNumber;
const int RangeArray::kTypeFieldNumber;
const int RangeArray::kFieldOfViewFieldNumber;
const int RangeArray::kMinRangeFieldNumber;
const int RangeArray::kMaxRangeFieldNumber;
const int RangeArray::kRangeFieldNumber;
const int RangeArray::kRawValueFieldNumber;
#endif  // !_MSC_VER

RangeArray::RangeArray()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AssisiMsg.RangeArray)
}

void RangeArray::InitAsDefaultInstance() {
  header_ = const_cast< ::AssisiMsg::Header*>(&::AssisiMsg::Header::default_instance());
}

RangeArray::RangeArray(const RangeArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AssisiMsg.RangeArray)
}

void RangeArray::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  type_ = 0;
  field_of_view_ = 0.5236f;
  min_range_ = 0;
  max_range_ = static_cast<float>(::google::protobuf::internal::Infinity());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeArray::~RangeArray() {
  // @@protoc_insertion_point(destructor:AssisiMsg.RangeArray)
  SharedDtor();
}

void RangeArray::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void RangeArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeArray_descriptor_;
}

const RangeArray& RangeArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dev_5fmsgs_2eproto();
  return *default_instance_;
}

RangeArray* RangeArray::default_instance_ = NULL;

RangeArray* RangeArray::New() const {
  return new RangeArray;
}

void RangeArray::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_header()) {
      if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
    }
    type_ = 0;
    field_of_view_ = 0.5236f;
    min_range_ = 0;
    max_range_ = static_cast<float>(::google::protobuf::internal::Infinity());
  }
  range_.Clear();
  raw_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AssisiMsg.RangeArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AssisiMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .AssisiMsg.RangeArray.SensorType type = 2 [default = IR];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AssisiMsg::RangeArray_SensorType_IsValid(value)) {
            set_type(static_cast< ::AssisiMsg::RangeArray_SensorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_field_of_view;
        break;
      }

      // optional float field_of_view = 3 [default = 0.5236];
      case 3: {
        if (tag == 29) {
         parse_field_of_view:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &field_of_view_)));
          set_has_field_of_view();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_min_range;
        break;
      }

      // optional float min_range = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_min_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_range_)));
          set_has_min_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_max_range;
        break;
      }

      // optional float max_range = 5 [default = inf];
      case 5: {
        if (tag == 45) {
         parse_max_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_range_)));
          set_has_max_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_range;
        break;
      }

      // repeated float range = 6;
      case 6: {
        if (tag == 53) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_range())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_range())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_range;
        if (input->ExpectTag(61)) goto parse_raw_value;
        break;
      }

      // repeated float raw_value = 7;
      case 7: {
        if (tag == 61) {
         parse_raw_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_raw_value())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_raw_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_raw_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AssisiMsg.RangeArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AssisiMsg.RangeArray)
  return false;
#undef DO_
}

void RangeArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AssisiMsg.RangeArray)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .AssisiMsg.RangeArray.SensorType type = 2 [default = IR];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional float field_of_view = 3 [default = 0.5236];
  if (has_field_of_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->field_of_view(), output);
  }

  // optional float min_range = 4 [default = 0];
  if (has_min_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_range(), output);
  }

  // optional float max_range = 5 [default = inf];
  if (has_max_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_range(), output);
  }

  // repeated float range = 6;
  for (int i = 0; i < this->range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->range(i), output);
  }

  // repeated float raw_value = 7;
  for (int i = 0; i < this->raw_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->raw_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AssisiMsg.RangeArray)
}

::google::protobuf::uint8* RangeArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssisiMsg.RangeArray)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .AssisiMsg.RangeArray.SensorType type = 2 [default = IR];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional float field_of_view = 3 [default = 0.5236];
  if (has_field_of_view()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->field_of_view(), target);
  }

  // optional float min_range = 4 [default = 0];
  if (has_min_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_range(), target);
  }

  // optional float max_range = 5 [default = inf];
  if (has_max_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_range(), target);
  }

  // repeated float range = 6;
  for (int i = 0; i < this->range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->range(i), target);
  }

  // repeated float raw_value = 7;
  for (int i = 0; i < this->raw_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->raw_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssisiMsg.RangeArray)
  return target;
}

int RangeArray::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AssisiMsg.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .AssisiMsg.RangeArray.SensorType type = 2 [default = IR];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float field_of_view = 3 [default = 0.5236];
    if (has_field_of_view()) {
      total_size += 1 + 4;
    }

    // optional float min_range = 4 [default = 0];
    if (has_min_range()) {
      total_size += 1 + 4;
    }

    // optional float max_range = 5 [default = inf];
    if (has_max_range()) {
      total_size += 1 + 4;
    }

  }
  // repeated float range = 6;
  {
    int data_size = 0;
    data_size = 4 * this->range_size();
    total_size += 1 * this->range_size() + data_size;
  }

  // repeated float raw_value = 7;
  {
    int data_size = 0;
    data_size = 4 * this->raw_value_size();
    total_size += 1 * this->raw_value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeArray::MergeFrom(const RangeArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  range_.MergeFrom(from.range_);
  raw_value_.MergeFrom(from.raw_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::AssisiMsg::Header::MergeFrom(from.header());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_field_of_view()) {
      set_field_of_view(from.field_of_view());
    }
    if (from.has_min_range()) {
      set_min_range(from.min_range());
    }
    if (from.has_max_range()) {
      set_max_range(from.max_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeArray::CopyFrom(const RangeArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeArray::IsInitialized() const {

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void RangeArray::Swap(RangeArray* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(type_, other->type_);
    std::swap(field_of_view_, other->field_of_view_);
    std::swap(min_range_, other->min_range_);
    std::swap(max_range_, other->max_range_);
    range_.Swap(&other->range_);
    raw_value_.Swap(&other->raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeArray_descriptor_;
  metadata.reflection = RangeArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Temperature::kHeaderFieldNumber;
const int Temperature::kTempFieldNumber;
#endif  // !_MSC_VER

Temperature::Temperature()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AssisiMsg.Temperature)
}

void Temperature::InitAsDefaultInstance() {
  header_ = const_cast< ::AssisiMsg::Header*>(&::AssisiMsg::Header::default_instance());
}

Temperature::Temperature(const Temperature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AssisiMsg.Temperature)
}

void Temperature::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  temp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Temperature::~Temperature() {
  // @@protoc_insertion_point(destructor:AssisiMsg.Temperature)
  SharedDtor();
}

void Temperature::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void Temperature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Temperature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Temperature_descriptor_;
}

const Temperature& Temperature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dev_5fmsgs_2eproto();
  return *default_instance_;
}

Temperature* Temperature::default_instance_ = NULL;

Temperature* Temperature::New() const {
  return new Temperature;
}

void Temperature::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
    }
    temp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Temperature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AssisiMsg.Temperature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AssisiMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_temp;
        break;
      }

      // required float temp = 2;
      case 2: {
        if (tag == 21) {
         parse_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AssisiMsg.Temperature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AssisiMsg.Temperature)
  return false;
#undef DO_
}

void Temperature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AssisiMsg.Temperature)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required float temp = 2;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->temp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AssisiMsg.Temperature)
}

::google::protobuf::uint8* Temperature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssisiMsg.Temperature)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required float temp = 2;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->temp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssisiMsg.Temperature)
  return target;
}

int Temperature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AssisiMsg.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required float temp = 2;
    if (has_temp()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Temperature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Temperature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Temperature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Temperature::MergeFrom(const Temperature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::AssisiMsg::Header::MergeFrom(from.header());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Temperature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Temperature::CopyFrom(const Temperature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Temperature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void Temperature::Swap(Temperature* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(temp_, other->temp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Temperature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Temperature_descriptor_;
  metadata.reflection = Temperature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TemperatureArray::kHeaderFieldNumber;
const int TemperatureArray::kTempFieldNumber;
#endif  // !_MSC_VER

TemperatureArray::TemperatureArray()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AssisiMsg.TemperatureArray)
}

void TemperatureArray::InitAsDefaultInstance() {
  header_ = const_cast< ::AssisiMsg::Header*>(&::AssisiMsg::Header::default_instance());
}

TemperatureArray::TemperatureArray(const TemperatureArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AssisiMsg.TemperatureArray)
}

void TemperatureArray::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TemperatureArray::~TemperatureArray() {
  // @@protoc_insertion_point(destructor:AssisiMsg.TemperatureArray)
  SharedDtor();
}

void TemperatureArray::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void TemperatureArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TemperatureArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TemperatureArray_descriptor_;
}

const TemperatureArray& TemperatureArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dev_5fmsgs_2eproto();
  return *default_instance_;
}

TemperatureArray* TemperatureArray::default_instance_ = NULL;

TemperatureArray* TemperatureArray::New() const {
  return new TemperatureArray;
}

void TemperatureArray::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  }
  temp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TemperatureArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AssisiMsg.TemperatureArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AssisiMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_temp;
        break;
      }

      // repeated float temp = 2;
      case 2: {
        if (tag == 21) {
         parse_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_temp())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_temp())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_temp;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AssisiMsg.TemperatureArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AssisiMsg.TemperatureArray)
  return false;
#undef DO_
}

void TemperatureArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AssisiMsg.TemperatureArray)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated float temp = 2;
  for (int i = 0; i < this->temp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->temp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AssisiMsg.TemperatureArray)
}

::google::protobuf::uint8* TemperatureArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssisiMsg.TemperatureArray)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated float temp = 2;
  for (int i = 0; i < this->temp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->temp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssisiMsg.TemperatureArray)
  return target;
}

int TemperatureArray::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AssisiMsg.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated float temp = 2;
  {
    int data_size = 0;
    data_size = 4 * this->temp_size();
    total_size += 1 * this->temp_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TemperatureArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TemperatureArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TemperatureArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TemperatureArray::MergeFrom(const TemperatureArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  temp_.MergeFrom(from.temp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::AssisiMsg::Header::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TemperatureArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemperatureArray::CopyFrom(const TemperatureArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemperatureArray::IsInitialized() const {

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void TemperatureArray::Swap(TemperatureArray* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    temp_.Swap(&other->temp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TemperatureArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TemperatureArray_descriptor_;
  metadata.reflection = TemperatureArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TemperatureWithGradient::kHeaderFieldNumber;
const int TemperatureWithGradient::kTempFieldNumber;
const int TemperatureWithGradient::kDtxFieldNumber;
const int TemperatureWithGradient::kDtyFieldNumber;
#endif  // !_MSC_VER

TemperatureWithGradient::TemperatureWithGradient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AssisiMsg.TemperatureWithGradient)
}

void TemperatureWithGradient::InitAsDefaultInstance() {
  header_ = const_cast< ::AssisiMsg::Header*>(&::AssisiMsg::Header::default_instance());
}

TemperatureWithGradient::TemperatureWithGradient(const TemperatureWithGradient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AssisiMsg.TemperatureWithGradient)
}

void TemperatureWithGradient::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  temp_ = 0;
  dtx_ = 0;
  dty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TemperatureWithGradient::~TemperatureWithGradient() {
  // @@protoc_insertion_point(destructor:AssisiMsg.TemperatureWithGradient)
  SharedDtor();
}

void TemperatureWithGradient::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void TemperatureWithGradient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TemperatureWithGradient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TemperatureWithGradient_descriptor_;
}

const TemperatureWithGradient& TemperatureWithGradient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dev_5fmsgs_2eproto();
  return *default_instance_;
}

TemperatureWithGradient* TemperatureWithGradient::default_instance_ = NULL;

TemperatureWithGradient* TemperatureWithGradient::New() const {
  return new TemperatureWithGradient;
}

void TemperatureWithGradient::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TemperatureWithGradient*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(temp_, dty_);
    if (has_header()) {
      if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TemperatureWithGradient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AssisiMsg.TemperatureWithGradient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AssisiMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_temp;
        break;
      }

      // required float temp = 2;
      case 2: {
        if (tag == 21) {
         parse_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_dtx;
        break;
      }

      // required float dtx = 3;
      case 3: {
        if (tag == 29) {
         parse_dtx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dtx_)));
          set_has_dtx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_dty;
        break;
      }

      // required float dty = 4;
      case 4: {
        if (tag == 37) {
         parse_dty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dty_)));
          set_has_dty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AssisiMsg.TemperatureWithGradient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AssisiMsg.TemperatureWithGradient)
  return false;
#undef DO_
}

void TemperatureWithGradient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AssisiMsg.TemperatureWithGradient)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required float temp = 2;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->temp(), output);
  }

  // required float dtx = 3;
  if (has_dtx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dtx(), output);
  }

  // required float dty = 4;
  if (has_dty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AssisiMsg.TemperatureWithGradient)
}

::google::protobuf::uint8* TemperatureWithGradient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssisiMsg.TemperatureWithGradient)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required float temp = 2;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->temp(), target);
  }

  // required float dtx = 3;
  if (has_dtx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dtx(), target);
  }

  // required float dty = 4;
  if (has_dty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssisiMsg.TemperatureWithGradient)
  return target;
}

int TemperatureWithGradient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AssisiMsg.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required float temp = 2;
    if (has_temp()) {
      total_size += 1 + 4;
    }

    // required float dtx = 3;
    if (has_dtx()) {
      total_size += 1 + 4;
    }

    // required float dty = 4;
    if (has_dty()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TemperatureWithGradient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TemperatureWithGradient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TemperatureWithGradient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TemperatureWithGradient::MergeFrom(const TemperatureWithGradient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::AssisiMsg::Header::MergeFrom(from.header());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_dtx()) {
      set_dtx(from.dtx());
    }
    if (from.has_dty()) {
      set_dty(from.dty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TemperatureWithGradient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemperatureWithGradient::CopyFrom(const TemperatureWithGradient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemperatureWithGradient::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void TemperatureWithGradient::Swap(TemperatureWithGradient* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(temp_, other->temp_);
    std::swap(dtx_, other->dtx_);
    std::swap(dty_, other->dty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TemperatureWithGradient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TemperatureWithGradient_descriptor_;
  metadata.reflection = TemperatureWithGradient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VibrationSetpoint::kHeaderFieldNumber;
const int VibrationSetpoint::kFreqFieldNumber;
const int VibrationSetpoint::kAmplitudeFieldNumber;
#endif  // !_MSC_VER

VibrationSetpoint::VibrationSetpoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AssisiMsg.VibrationSetpoint)
}

void VibrationSetpoint::InitAsDefaultInstance() {
  header_ = const_cast< ::AssisiMsg::Header*>(&::AssisiMsg::Header::default_instance());
}

VibrationSetpoint::VibrationSetpoint(const VibrationSetpoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AssisiMsg.VibrationSetpoint)
}

void VibrationSetpoint::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  freq_ = 0;
  amplitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VibrationSetpoint::~VibrationSetpoint() {
  // @@protoc_insertion_point(destructor:AssisiMsg.VibrationSetpoint)
  SharedDtor();
}

void VibrationSetpoint::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void VibrationSetpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VibrationSetpoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VibrationSetpoint_descriptor_;
}

const VibrationSetpoint& VibrationSetpoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dev_5fmsgs_2eproto();
  return *default_instance_;
}

VibrationSetpoint* VibrationSetpoint::default_instance_ = NULL;

VibrationSetpoint* VibrationSetpoint::New() const {
  return new VibrationSetpoint;
}

void VibrationSetpoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VibrationSetpoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(freq_, amplitude_);
    if (has_header()) {
      if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VibrationSetpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AssisiMsg.VibrationSetpoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AssisiMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_freq;
        break;
      }

      // required double freq = 2;
      case 2: {
        if (tag == 17) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_amplitude;
        break;
      }

      // optional double amplitude = 3;
      case 3: {
        if (tag == 25) {
         parse_amplitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amplitude_)));
          set_has_amplitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AssisiMsg.VibrationSetpoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AssisiMsg.VibrationSetpoint)
  return false;
#undef DO_
}

void VibrationSetpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AssisiMsg.VibrationSetpoint)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required double freq = 2;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->freq(), output);
  }

  // optional double amplitude = 3;
  if (has_amplitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->amplitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AssisiMsg.VibrationSetpoint)
}

::google::protobuf::uint8* VibrationSetpoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssisiMsg.VibrationSetpoint)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required double freq = 2;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->freq(), target);
  }

  // optional double amplitude = 3;
  if (has_amplitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->amplitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssisiMsg.VibrationSetpoint)
  return target;
}

int VibrationSetpoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AssisiMsg.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required double freq = 2;
    if (has_freq()) {
      total_size += 1 + 8;
    }

    // optional double amplitude = 3;
    if (has_amplitude()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VibrationSetpoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VibrationSetpoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VibrationSetpoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VibrationSetpoint::MergeFrom(const VibrationSetpoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::AssisiMsg::Header::MergeFrom(from.header());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
    if (from.has_amplitude()) {
      set_amplitude(from.amplitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VibrationSetpoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VibrationSetpoint::CopyFrom(const VibrationSetpoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VibrationSetpoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void VibrationSetpoint::Swap(VibrationSetpoint* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(freq_, other->freq_);
    std::swap(amplitude_, other->amplitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VibrationSetpoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VibrationSetpoint_descriptor_;
  metadata.reflection = VibrationSetpoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VibrationReading::kHeaderFieldNumber;
const int VibrationReading::kFreqFieldNumber;
const int VibrationReading::kAmplitudeFieldNumber;
const int VibrationReading::kAmplitudeStdevFieldNumber;
#endif  // !_MSC_VER

VibrationReading::VibrationReading()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AssisiMsg.VibrationReading)
}

void VibrationReading::InitAsDefaultInstance() {
  header_ = const_cast< ::AssisiMsg::Header*>(&::AssisiMsg::Header::default_instance());
}

VibrationReading::VibrationReading(const VibrationReading& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AssisiMsg.VibrationReading)
}

void VibrationReading::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VibrationReading::~VibrationReading() {
  // @@protoc_insertion_point(destructor:AssisiMsg.VibrationReading)
  SharedDtor();
}

void VibrationReading::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void VibrationReading::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VibrationReading::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VibrationReading_descriptor_;
}

const VibrationReading& VibrationReading::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dev_5fmsgs_2eproto();
  return *default_instance_;
}

VibrationReading* VibrationReading::default_instance_ = NULL;

VibrationReading* VibrationReading::New() const {
  return new VibrationReading;
}

void VibrationReading::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  }
  freq_.Clear();
  amplitude_.Clear();
  amplitude_stdev_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VibrationReading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AssisiMsg.VibrationReading)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AssisiMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_freq;
        break;
      }

      // repeated float freq = 2;
      case 2: {
        if (tag == 21) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_freq())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_freq())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_freq;
        if (input->ExpectTag(29)) goto parse_amplitude;
        break;
      }

      // repeated float amplitude = 3;
      case 3: {
        if (tag == 29) {
         parse_amplitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_amplitude())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_amplitude())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_amplitude;
        if (input->ExpectTag(37)) goto parse_amplitude_stdev;
        break;
      }

      // repeated float amplitude_stdev = 4;
      case 4: {
        if (tag == 37) {
         parse_amplitude_stdev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_amplitude_stdev())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_amplitude_stdev())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_amplitude_stdev;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AssisiMsg.VibrationReading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AssisiMsg.VibrationReading)
  return false;
#undef DO_
}

void VibrationReading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AssisiMsg.VibrationReading)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated float freq = 2;
  for (int i = 0; i < this->freq_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->freq(i), output);
  }

  // repeated float amplitude = 3;
  for (int i = 0; i < this->amplitude_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->amplitude(i), output);
  }

  // repeated float amplitude_stdev = 4;
  for (int i = 0; i < this->amplitude_stdev_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->amplitude_stdev(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AssisiMsg.VibrationReading)
}

::google::protobuf::uint8* VibrationReading::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssisiMsg.VibrationReading)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated float freq = 2;
  for (int i = 0; i < this->freq_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->freq(i), target);
  }

  // repeated float amplitude = 3;
  for (int i = 0; i < this->amplitude_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->amplitude(i), target);
  }

  // repeated float amplitude_stdev = 4;
  for (int i = 0; i < this->amplitude_stdev_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->amplitude_stdev(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssisiMsg.VibrationReading)
  return target;
}

int VibrationReading::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AssisiMsg.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated float freq = 2;
  {
    int data_size = 0;
    data_size = 4 * this->freq_size();
    total_size += 1 * this->freq_size() + data_size;
  }

  // repeated float amplitude = 3;
  {
    int data_size = 0;
    data_size = 4 * this->amplitude_size();
    total_size += 1 * this->amplitude_size() + data_size;
  }

  // repeated float amplitude_stdev = 4;
  {
    int data_size = 0;
    data_size = 4 * this->amplitude_stdev_size();
    total_size += 1 * this->amplitude_stdev_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VibrationReading::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VibrationReading* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VibrationReading*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VibrationReading::MergeFrom(const VibrationReading& from) {
  GOOGLE_CHECK_NE(&from, this);
  freq_.MergeFrom(from.freq_);
  amplitude_.MergeFrom(from.amplitude_);
  amplitude_stdev_.MergeFrom(from.amplitude_stdev_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::AssisiMsg::Header::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VibrationReading::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VibrationReading::CopyFrom(const VibrationReading& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VibrationReading::IsInitialized() const {

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void VibrationReading::Swap(VibrationReading* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    freq_.Swap(&other->freq_);
    amplitude_.Swap(&other->amplitude_);
    amplitude_stdev_.Swap(&other->amplitude_stdev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VibrationReading::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VibrationReading_descriptor_;
  metadata.reflection = VibrationReading_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VibrationReadingArray::kHeaderFieldNumber;
const int VibrationReadingArray::kReadingFieldNumber;
#endif  // !_MSC_VER

VibrationReadingArray::VibrationReadingArray()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AssisiMsg.VibrationReadingArray)
}

void VibrationReadingArray::InitAsDefaultInstance() {
  header_ = const_cast< ::AssisiMsg::Header*>(&::AssisiMsg::Header::default_instance());
}

VibrationReadingArray::VibrationReadingArray(const VibrationReadingArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AssisiMsg.VibrationReadingArray)
}

void VibrationReadingArray::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VibrationReadingArray::~VibrationReadingArray() {
  // @@protoc_insertion_point(destructor:AssisiMsg.VibrationReadingArray)
  SharedDtor();
}

void VibrationReadingArray::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void VibrationReadingArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VibrationReadingArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VibrationReadingArray_descriptor_;
}

const VibrationReadingArray& VibrationReadingArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dev_5fmsgs_2eproto();
  return *default_instance_;
}

VibrationReadingArray* VibrationReadingArray::default_instance_ = NULL;

VibrationReadingArray* VibrationReadingArray::New() const {
  return new VibrationReadingArray;
}

void VibrationReadingArray::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
  }
  reading_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VibrationReadingArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AssisiMsg.VibrationReadingArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AssisiMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reading;
        break;
      }

      // repeated .AssisiMsg.VibrationReading reading = 2;
      case 2: {
        if (tag == 18) {
         parse_reading:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reading()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reading;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AssisiMsg.VibrationReadingArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AssisiMsg.VibrationReadingArray)
  return false;
#undef DO_
}

void VibrationReadingArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AssisiMsg.VibrationReadingArray)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated .AssisiMsg.VibrationReading reading = 2;
  for (int i = 0; i < this->reading_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reading(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AssisiMsg.VibrationReadingArray)
}

::google::protobuf::uint8* VibrationReadingArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssisiMsg.VibrationReadingArray)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated .AssisiMsg.VibrationReading reading = 2;
  for (int i = 0; i < this->reading_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reading(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssisiMsg.VibrationReadingArray)
  return target;
}

int VibrationReadingArray::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AssisiMsg.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated .AssisiMsg.VibrationReading reading = 2;
  total_size += 1 * this->reading_size();
  for (int i = 0; i < this->reading_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reading(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VibrationReadingArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VibrationReadingArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VibrationReadingArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VibrationReadingArray::MergeFrom(const VibrationReadingArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  reading_.MergeFrom(from.reading_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::AssisiMsg::Header::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VibrationReadingArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VibrationReadingArray::CopyFrom(const VibrationReadingArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VibrationReadingArray::IsInitialized() const {

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->reading())) return false;
  return true;
}

void VibrationReadingArray::Swap(VibrationReadingArray* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    reading_.Swap(&other->reading_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VibrationReadingArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VibrationReadingArray_descriptor_;
  metadata.reflection = VibrationReadingArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiffDrive::kHeaderFieldNumber;
const int DiffDrive::kVelLeftFieldNumber;
const int DiffDrive::kVelRightFieldNumber;
#endif  // !_MSC_VER

DiffDrive::DiffDrive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AssisiMsg.DiffDrive)
}

void DiffDrive::InitAsDefaultInstance() {
  header_ = const_cast< ::AssisiMsg::Header*>(&::AssisiMsg::Header::default_instance());
}

DiffDrive::DiffDrive(const DiffDrive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AssisiMsg.DiffDrive)
}

void DiffDrive::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  vel_left_ = 0;
  vel_right_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiffDrive::~DiffDrive() {
  // @@protoc_insertion_point(destructor:AssisiMsg.DiffDrive)
  SharedDtor();
}

void DiffDrive::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void DiffDrive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiffDrive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiffDrive_descriptor_;
}

const DiffDrive& DiffDrive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dev_5fmsgs_2eproto();
  return *default_instance_;
}

DiffDrive* DiffDrive::default_instance_ = NULL;

DiffDrive* DiffDrive::New() const {
  return new DiffDrive;
}

void DiffDrive::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DiffDrive*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(vel_left_, vel_right_);
    if (has_header()) {
      if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiffDrive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AssisiMsg.DiffDrive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AssisiMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_vel_left;
        break;
      }

      // required double vel_left = 2;
      case 2: {
        if (tag == 17) {
         parse_vel_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_left_)));
          set_has_vel_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_vel_right;
        break;
      }

      // required double vel_right = 3;
      case 3: {
        if (tag == 25) {
         parse_vel_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_right_)));
          set_has_vel_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AssisiMsg.DiffDrive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AssisiMsg.DiffDrive)
  return false;
#undef DO_
}

void DiffDrive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AssisiMsg.DiffDrive)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required double vel_left = 2;
  if (has_vel_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->vel_left(), output);
  }

  // required double vel_right = 3;
  if (has_vel_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vel_right(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AssisiMsg.DiffDrive)
}

::google::protobuf::uint8* DiffDrive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssisiMsg.DiffDrive)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required double vel_left = 2;
  if (has_vel_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->vel_left(), target);
  }

  // required double vel_right = 3;
  if (has_vel_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vel_right(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssisiMsg.DiffDrive)
  return target;
}

int DiffDrive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AssisiMsg.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required double vel_left = 2;
    if (has_vel_left()) {
      total_size += 1 + 8;
    }

    // required double vel_right = 3;
    if (has_vel_right()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiffDrive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiffDrive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiffDrive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiffDrive::MergeFrom(const DiffDrive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::AssisiMsg::Header::MergeFrom(from.header());
    }
    if (from.has_vel_left()) {
      set_vel_left(from.vel_left());
    }
    if (from.has_vel_right()) {
      set_vel_right(from.vel_right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiffDrive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiffDrive::CopyFrom(const DiffDrive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiffDrive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void DiffDrive::Swap(DiffDrive* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(vel_left_, other->vel_left_);
    std::swap(vel_right_, other->vel_right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiffDrive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiffDrive_descriptor_;
  metadata.reflection = DiffDrive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectArray::kHeaderFieldNumber;
const int ObjectArray::kFieldOfViewFieldNumber;
const int ObjectArray::kMinRangeFieldNumber;
const int ObjectArray::kMaxRangeFieldNumber;
const int ObjectArray::kRangeFieldNumber;
const int ObjectArray::kTypeFieldNumber;
#endif  // !_MSC_VER

ObjectArray::ObjectArray()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AssisiMsg.ObjectArray)
}

void ObjectArray::InitAsDefaultInstance() {
  header_ = const_cast< ::AssisiMsg::Header*>(&::AssisiMsg::Header::default_instance());
}

ObjectArray::ObjectArray(const ObjectArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AssisiMsg.ObjectArray)
}

void ObjectArray::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  field_of_view_ = 0.5236f;
  min_range_ = 0;
  max_range_ = static_cast<float>(::google::protobuf::internal::Infinity());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectArray::~ObjectArray() {
  // @@protoc_insertion_point(destructor:AssisiMsg.ObjectArray)
  SharedDtor();
}

void ObjectArray::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void ObjectArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectArray_descriptor_;
}

const ObjectArray& ObjectArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dev_5fmsgs_2eproto();
  return *default_instance_;
}

ObjectArray* ObjectArray::default_instance_ = NULL;

ObjectArray* ObjectArray::New() const {
  return new ObjectArray;
}

void ObjectArray::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_header()) {
      if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
    }
    field_of_view_ = 0.5236f;
    min_range_ = 0;
    max_range_ = static_cast<float>(::google::protobuf::internal::Infinity());
  }
  range_.Clear();
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AssisiMsg.ObjectArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AssisiMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_field_of_view;
        break;
      }

      // optional float field_of_view = 3 [default = 0.5236];
      case 3: {
        if (tag == 29) {
         parse_field_of_view:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &field_of_view_)));
          set_has_field_of_view();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_min_range;
        break;
      }

      // optional float min_range = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_min_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_range_)));
          set_has_min_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_max_range;
        break;
      }

      // optional float max_range = 5 [default = inf];
      case 5: {
        if (tag == 45) {
         parse_max_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_range_)));
          set_has_max_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_range;
        break;
      }

      // repeated float range = 6;
      case 6: {
        if (tag == 53) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_range())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_range())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_range;
        if (input->ExpectTag(58)) goto parse_type;
        break;
      }

      // repeated string type = 7;
      case 7: {
        if (tag == 58) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type(this->type_size() - 1).data(),
            this->type(this->type_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_type;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AssisiMsg.ObjectArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AssisiMsg.ObjectArray)
  return false;
#undef DO_
}

void ObjectArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AssisiMsg.ObjectArray)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional float field_of_view = 3 [default = 0.5236];
  if (has_field_of_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->field_of_view(), output);
  }

  // optional float min_range = 4 [default = 0];
  if (has_min_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_range(), output);
  }

  // optional float max_range = 5 [default = inf];
  if (has_max_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_range(), output);
  }

  // repeated float range = 6;
  for (int i = 0; i < this->range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->range(i), output);
  }

  // repeated string type = 7;
  for (int i = 0; i < this->type_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->type(i).data(), this->type(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "type");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AssisiMsg.ObjectArray)
}

::google::protobuf::uint8* ObjectArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssisiMsg.ObjectArray)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional float field_of_view = 3 [default = 0.5236];
  if (has_field_of_view()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->field_of_view(), target);
  }

  // optional float min_range = 4 [default = 0];
  if (has_min_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_range(), target);
  }

  // optional float max_range = 5 [default = inf];
  if (has_max_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_range(), target);
  }

  // repeated float range = 6;
  for (int i = 0; i < this->range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->range(i), target);
  }

  // repeated string type = 7;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type(i).data(), this->type(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssisiMsg.ObjectArray)
  return target;
}

int ObjectArray::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AssisiMsg.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional float field_of_view = 3 [default = 0.5236];
    if (has_field_of_view()) {
      total_size += 1 + 4;
    }

    // optional float min_range = 4 [default = 0];
    if (has_min_range()) {
      total_size += 1 + 4;
    }

    // optional float max_range = 5 [default = inf];
    if (has_max_range()) {
      total_size += 1 + 4;
    }

  }
  // repeated float range = 6;
  {
    int data_size = 0;
    data_size = 4 * this->range_size();
    total_size += 1 * this->range_size() + data_size;
  }

  // repeated string type = 7;
  total_size += 1 * this->type_size();
  for (int i = 0; i < this->type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->type(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectArray::MergeFrom(const ObjectArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  range_.MergeFrom(from.range_);
  type_.MergeFrom(from.type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::AssisiMsg::Header::MergeFrom(from.header());
    }
    if (from.has_field_of_view()) {
      set_field_of_view(from.field_of_view());
    }
    if (from.has_min_range()) {
      set_min_range(from.min_range());
    }
    if (from.has_max_range()) {
      set_max_range(from.max_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectArray::CopyFrom(const ObjectArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectArray::IsInitialized() const {

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void ObjectArray::Swap(ObjectArray* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(field_of_view_, other->field_of_view_);
    std::swap(min_range_, other->min_range_);
    std::swap(max_range_, other->max_range_);
    range_.Swap(&other->range_);
    type_.Swap(&other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectArray_descriptor_;
  metadata.reflection = ObjectArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Airflow::kHeaderFieldNumber;
const int Airflow::kIntensityFieldNumber;
#endif  // !_MSC_VER

Airflow::Airflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AssisiMsg.Airflow)
}

void Airflow::InitAsDefaultInstance() {
  header_ = const_cast< ::AssisiMsg::Header*>(&::AssisiMsg::Header::default_instance());
}

Airflow::Airflow(const Airflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AssisiMsg.Airflow)
}

void Airflow::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  intensity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Airflow::~Airflow() {
  // @@protoc_insertion_point(destructor:AssisiMsg.Airflow)
  SharedDtor();
}

void Airflow::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void Airflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Airflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Airflow_descriptor_;
}

const Airflow& Airflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dev_5fmsgs_2eproto();
  return *default_instance_;
}

Airflow* Airflow::default_instance_ = NULL;

Airflow* Airflow::New() const {
  return new Airflow;
}

void Airflow::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
    }
    intensity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Airflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AssisiMsg.Airflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AssisiMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_intensity;
        break;
      }

      // required float intensity = 2;
      case 2: {
        if (tag == 21) {
         parse_intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensity_)));
          set_has_intensity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AssisiMsg.Airflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AssisiMsg.Airflow)
  return false;
#undef DO_
}

void Airflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AssisiMsg.Airflow)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required float intensity = 2;
  if (has_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->intensity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AssisiMsg.Airflow)
}

::google::protobuf::uint8* Airflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssisiMsg.Airflow)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required float intensity = 2;
  if (has_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->intensity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssisiMsg.Airflow)
  return target;
}

int Airflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AssisiMsg.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required float intensity = 2;
    if (has_intensity()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Airflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Airflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Airflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Airflow::MergeFrom(const Airflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::AssisiMsg::Header::MergeFrom(from.header());
    }
    if (from.has_intensity()) {
      set_intensity(from.intensity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Airflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Airflow::CopyFrom(const Airflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Airflow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void Airflow::Swap(Airflow* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(intensity_, other->intensity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Airflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Airflow_descriptor_;
  metadata.reflection = Airflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AirflowReading::kHeaderFieldNumber;
const int AirflowReading::kIntensityFieldNumber;
const int AirflowReading::kDirectionFieldNumber;
#endif  // !_MSC_VER

AirflowReading::AirflowReading()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AssisiMsg.AirflowReading)
}

void AirflowReading::InitAsDefaultInstance() {
  header_ = const_cast< ::AssisiMsg::Header*>(&::AssisiMsg::Header::default_instance());
}

AirflowReading::AirflowReading(const AirflowReading& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AssisiMsg.AirflowReading)
}

void AirflowReading::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  intensity_ = 0;
  direction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AirflowReading::~AirflowReading() {
  // @@protoc_insertion_point(destructor:AssisiMsg.AirflowReading)
  SharedDtor();
}

void AirflowReading::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void AirflowReading::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AirflowReading::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirflowReading_descriptor_;
}

const AirflowReading& AirflowReading::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dev_5fmsgs_2eproto();
  return *default_instance_;
}

AirflowReading* AirflowReading::default_instance_ = NULL;

AirflowReading* AirflowReading::New() const {
  return new AirflowReading;
}

void AirflowReading::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AirflowReading*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(intensity_, direction_);
    if (has_header()) {
      if (header_ != NULL) header_->::AssisiMsg::Header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AirflowReading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AssisiMsg.AirflowReading)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AssisiMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_intensity;
        break;
      }

      // required float intensity = 2;
      case 2: {
        if (tag == 21) {
         parse_intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensity_)));
          set_has_intensity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_direction;
        break;
      }

      // required float direction = 3;
      case 3: {
        if (tag == 29) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AssisiMsg.AirflowReading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AssisiMsg.AirflowReading)
  return false;
#undef DO_
}

void AirflowReading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AssisiMsg.AirflowReading)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required float intensity = 2;
  if (has_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->intensity(), output);
  }

  // required float direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AssisiMsg.AirflowReading)
}

::google::protobuf::uint8* AirflowReading::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssisiMsg.AirflowReading)
  // optional .AssisiMsg.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required float intensity = 2;
  if (has_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->intensity(), target);
  }

  // required float direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssisiMsg.AirflowReading)
  return target;
}

int AirflowReading::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AssisiMsg.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required float intensity = 2;
    if (has_intensity()) {
      total_size += 1 + 4;
    }

    // required float direction = 3;
    if (has_direction()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AirflowReading::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AirflowReading* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AirflowReading*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AirflowReading::MergeFrom(const AirflowReading& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::AssisiMsg::Header::MergeFrom(from.header());
    }
    if (from.has_intensity()) {
      set_intensity(from.intensity());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AirflowReading::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirflowReading::CopyFrom(const AirflowReading& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirflowReading::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void AirflowReading::Swap(AirflowReading* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(intensity_, other->intensity_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AirflowReading::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AirflowReading_descriptor_;
  metadata.reflection = AirflowReading_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AssisiMsg

// @@protoc_insertion_point(global_scope)
